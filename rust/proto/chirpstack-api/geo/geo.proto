syntax = "proto3";

package geo;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/geo";
option java_package = "io.chirpstack.api.geo";

import "gw/gw.proto";
import "common/common.proto";


// GeolocationServerService implements a geolocation-server service.
service GeolocationServerService {
    // ResolveTDOA resolves the location based on TDOA.
    rpc ResolveTDOA(ResolveTDOARequest) returns (ResolveTDOAResponse) {}

    // ResolveMultiFrameTDOA resolves the location using TDOA, based on
    // multiple frames.
    rpc ResolveMultiFrameTDOA(ResolveMultiFrameTDOARequest) returns (ResolveMultiFrameTDOAResponse) {}
}

message ResolveResult {
    // Resolved location.
    common.Location location = 1;
}

message FrameRXInfo {
    // Uplink Gateway meta-data.
    repeated gw.UplinkRXInfo rx_info = 1;
}

message ResolveTDOARequest {
    // Device ID.
    bytes dev_eui = 1 [json_name = "devEUI"];

    // Frame meta-data.
    FrameRXInfo frame_rx_info = 2 [json_name = "frameRXInfo"];

    // Device reference altitude.
    double device_reference_altitude = 3;
}

message ResolveMultiFrameTDOARequest {
    // Device ID.
    bytes dev_eui = 1 [json_name = "devEUI"];

    // Frames meta-data.
    repeated FrameRXInfo frame_rx_info_set = 2 [json_name = "frameRXInfoSet"];

    // Device reference altitude.
    double device_reference_altitude = 3;
}

message ResolveTDOAResponse {
    // Resolve result.
    ResolveResult result = 1;
}

message ResolveMultiFrameTDOAResponse {
    // Resolve result.
    ResolveResult result = 1;
}
