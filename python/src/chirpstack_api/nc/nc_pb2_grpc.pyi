"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc

from .nc_pb2 import *
# NetworkControllerService is the server to be implemeted by the network-controller.
class NetworkControllerServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # HandleUplinkMetaData handles uplink meta-rata.
    HandleUplinkMetaData:grpc.UnaryUnaryMultiCallable[
        global___HandleUplinkMetaDataRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # HandleDownlinkMetaData handles downlink meta-data.
    HandleDownlinkMetaData:grpc.UnaryUnaryMultiCallable[
        global___HandleDownlinkMetaDataRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # HandleUplinkMACCommand handles an uplink mac-command.
    # This method will only be called in case the mac-command request was
    # enqueued throught the API or when the CID is >= 0x80 (proprietary
    # mac-command range).
    HandleUplinkMACCommand:grpc.UnaryUnaryMultiCallable[
        global___HandleUplinkMACCommandRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # HandleRejectedUplinkFrameSet handles a rejected uplink.
    # And uplink can be rejected in the case the device has not (yet) been
    # provisioned, because of invalid frame-counter, MIC, ...
    HandleRejectedUplinkFrameSet:grpc.UnaryUnaryMultiCallable[
        global___HandleRejectedUplinkFrameSetRequest,
        google.protobuf.empty_pb2.Empty] = ...


# NetworkControllerService is the server to be implemeted by the network-controller.
class NetworkControllerServiceServicer(metaclass=abc.ABCMeta):
    # HandleUplinkMetaData handles uplink meta-rata.
    @abc.abstractmethod
    def HandleUplinkMetaData(self,
        request: global___HandleUplinkMetaDataRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # HandleDownlinkMetaData handles downlink meta-data.
    @abc.abstractmethod
    def HandleDownlinkMetaData(self,
        request: global___HandleDownlinkMetaDataRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # HandleUplinkMACCommand handles an uplink mac-command.
    # This method will only be called in case the mac-command request was
    # enqueued throught the API or when the CID is >= 0x80 (proprietary
    # mac-command range).
    @abc.abstractmethod
    def HandleUplinkMACCommand(self,
        request: global___HandleUplinkMACCommandRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # HandleRejectedUplinkFrameSet handles a rejected uplink.
    # And uplink can be rejected in the case the device has not (yet) been
    # provisioned, because of invalid frame-counter, MIC, ...
    @abc.abstractmethod
    def HandleRejectedUplinkFrameSet(self,
        request: global___HandleRejectedUplinkFrameSetRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...


def add_NetworkControllerServiceServicer_to_server(servicer: NetworkControllerServiceServicer, server: grpc.Server) -> None: ...
