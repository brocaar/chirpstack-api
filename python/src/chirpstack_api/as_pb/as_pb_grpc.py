# Generated by the Protocol Buffers compiler. DO NOT EDIT!
# source: chirpstack-api/as_pb/as_pb.proto
# plugin: grpclib.plugin.main
import abc
import typing

import grpclib.const
import grpclib.client
if typing.TYPE_CHECKING:
    import grpclib.server

import google.protobuf.empty_pb2
import google.protobuf.timestamp_pb2
import chirpstack_api.common.common_pb2
import chirpstack_api.gw.gw_pb2
import chirpstack_api.as_pb.as_pb_pb2


class ApplicationServerServiceBase(abc.ABC):

    @abc.abstractmethod
    async def HandleUplinkData(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleUplinkDataRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def HandleProprietaryUplink(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleProprietaryUplinkRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def HandleError(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleErrorRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def HandleDownlinkACK(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleDownlinkACKRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def HandleGatewayStats(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleGatewayStatsRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def HandleTxAck(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.HandleTxAckRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def SetDeviceStatus(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.SetDeviceStatusRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def SetDeviceLocation(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.SetDeviceLocationRequest, google.protobuf.empty_pb2.Empty]') -> None:
        pass

    @abc.abstractmethod
    async def ReEncryptDeviceQueueItems(self, stream: 'grpclib.server.Stream[chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsRequest, chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsResponse]') -> None:
        pass

    def __mapping__(self) -> typing.Dict[str, grpclib.const.Handler]:
        return {
            '/as.ApplicationServerService/HandleUplinkData': grpclib.const.Handler(
                self.HandleUplinkData,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleUplinkDataRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/HandleProprietaryUplink': grpclib.const.Handler(
                self.HandleProprietaryUplink,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleProprietaryUplinkRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/HandleError': grpclib.const.Handler(
                self.HandleError,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleErrorRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/HandleDownlinkACK': grpclib.const.Handler(
                self.HandleDownlinkACK,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleDownlinkACKRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/HandleGatewayStats': grpclib.const.Handler(
                self.HandleGatewayStats,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleGatewayStatsRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/HandleTxAck': grpclib.const.Handler(
                self.HandleTxAck,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.HandleTxAckRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/SetDeviceStatus': grpclib.const.Handler(
                self.SetDeviceStatus,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.SetDeviceStatusRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/SetDeviceLocation': grpclib.const.Handler(
                self.SetDeviceLocation,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.SetDeviceLocationRequest,
                google.protobuf.empty_pb2.Empty,
            ),
            '/as.ApplicationServerService/ReEncryptDeviceQueueItems': grpclib.const.Handler(
                self.ReEncryptDeviceQueueItems,
                grpclib.const.Cardinality.UNARY_UNARY,
                chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsRequest,
                chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsResponse,
            ),
        }


class ApplicationServerServiceStub:

    def __init__(self, channel: grpclib.client.Channel) -> None:
        self.HandleUplinkData = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleUplinkData',
            chirpstack_api.as_pb.as_pb_pb2.HandleUplinkDataRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.HandleProprietaryUplink = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleProprietaryUplink',
            chirpstack_api.as_pb.as_pb_pb2.HandleProprietaryUplinkRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.HandleError = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleError',
            chirpstack_api.as_pb.as_pb_pb2.HandleErrorRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.HandleDownlinkACK = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleDownlinkACK',
            chirpstack_api.as_pb.as_pb_pb2.HandleDownlinkACKRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.HandleGatewayStats = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleGatewayStats',
            chirpstack_api.as_pb.as_pb_pb2.HandleGatewayStatsRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.HandleTxAck = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/HandleTxAck',
            chirpstack_api.as_pb.as_pb_pb2.HandleTxAckRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.SetDeviceStatus = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/SetDeviceStatus',
            chirpstack_api.as_pb.as_pb_pb2.SetDeviceStatusRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.SetDeviceLocation = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/SetDeviceLocation',
            chirpstack_api.as_pb.as_pb_pb2.SetDeviceLocationRequest,
            google.protobuf.empty_pb2.Empty,
        )
        self.ReEncryptDeviceQueueItems = grpclib.client.UnaryUnaryMethod(
            channel,
            '/as.ApplicationServerService/ReEncryptDeviceQueueItems',
            chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsRequest,
            chirpstack_api.as_pb.as_pb_pb2.ReEncryptDeviceQueueItemsResponse,
        )
