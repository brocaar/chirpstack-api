"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import abc
import google.protobuf.empty_pb2
import grpc
import typing

from .gateway_pb2 import *
# GatewayService is the service managing the gateways.
class GatewayServiceStub:
    def __init__(self, channel: grpc.Channel) -> None: ...
    # Create creates the given gateway.
    Create:grpc.UnaryUnaryMultiCallable[
        global___CreateGatewayRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Get returns the gateway for the requested mac address.
    Get:grpc.UnaryUnaryMultiCallable[
        global___GetGatewayRequest,
        global___GetGatewayResponse] = ...

    # Update updates the gateway matching the given mac address.
    Update:grpc.UnaryUnaryMultiCallable[
        global___UpdateGatewayRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # Delete deletes the gateway matching the given mac address.
    Delete:grpc.UnaryUnaryMultiCallable[
        global___DeleteGatewayRequest,
        google.protobuf.empty_pb2.Empty] = ...

    # List lists the gateways.
    List:grpc.UnaryUnaryMultiCallable[
        global___ListGatewayRequest,
        global___ListGatewayResponse] = ...

    # GetStats lists the gateway stats given the query parameters.
    GetStats:grpc.UnaryUnaryMultiCallable[
        global___GetGatewayStatsRequest,
        global___GetGatewayStatsResponse] = ...

    # GetLastPing returns the last emitted ping and gateways receiving this ping.
    GetLastPing:grpc.UnaryUnaryMultiCallable[
        global___GetLastPingRequest,
        global___GetLastPingResponse] = ...

    # GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
    # This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
    # CA certificate and key, which is used for signing the TLS certificate. The returned TLS
    # certificate will have the Gateway ID as Common Name.
    GenerateGatewayClientCertificate:grpc.UnaryUnaryMultiCallable[
        global___GenerateGatewayClientCertificateRequest,
        global___GenerateGatewayClientCertificateResponse] = ...

    # StreamFrameLogs streams the uplink and downlink frame-logs for the given gateway ID.
    # Notes:
    #   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
    #   * This endpoint does not work from a web-browser.
    StreamFrameLogs:grpc.UnaryStreamMultiCallable[
        global___StreamGatewayFrameLogsRequest,
        global___StreamGatewayFrameLogsResponse] = ...


# GatewayService is the service managing the gateways.
class GatewayServiceServicer(metaclass=abc.ABCMeta):
    # Create creates the given gateway.
    @abc.abstractmethod
    def Create(self,
        request: global___CreateGatewayRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Get returns the gateway for the requested mac address.
    @abc.abstractmethod
    def Get(self,
        request: global___GetGatewayRequest,
        context: grpc.ServicerContext,
    ) -> global___GetGatewayResponse: ...

    # Update updates the gateway matching the given mac address.
    @abc.abstractmethod
    def Update(self,
        request: global___UpdateGatewayRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # Delete deletes the gateway matching the given mac address.
    @abc.abstractmethod
    def Delete(self,
        request: global___DeleteGatewayRequest,
        context: grpc.ServicerContext,
    ) -> google.protobuf.empty_pb2.Empty: ...

    # List lists the gateways.
    @abc.abstractmethod
    def List(self,
        request: global___ListGatewayRequest,
        context: grpc.ServicerContext,
    ) -> global___ListGatewayResponse: ...

    # GetStats lists the gateway stats given the query parameters.
    @abc.abstractmethod
    def GetStats(self,
        request: global___GetGatewayStatsRequest,
        context: grpc.ServicerContext,
    ) -> global___GetGatewayStatsResponse: ...

    # GetLastPing returns the last emitted ping and gateways receiving this ping.
    @abc.abstractmethod
    def GetLastPing(self,
        request: global___GetLastPingRequest,
        context: grpc.ServicerContext,
    ) -> global___GetLastPingResponse: ...

    # GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
    # This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
    # CA certificate and key, which is used for signing the TLS certificate. The returned TLS
    # certificate will have the Gateway ID as Common Name.
    @abc.abstractmethod
    def GenerateGatewayClientCertificate(self,
        request: global___GenerateGatewayClientCertificateRequest,
        context: grpc.ServicerContext,
    ) -> global___GenerateGatewayClientCertificateResponse: ...

    # StreamFrameLogs streams the uplink and downlink frame-logs for the given gateway ID.
    # Notes:
    #   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
    #   * This endpoint does not work from a web-browser.
    @abc.abstractmethod
    def StreamFrameLogs(self,
        request: global___StreamGatewayFrameLogsRequest,
        context: grpc.ServicerContext,
    ) -> typing.Iterator[global___StreamGatewayFrameLogsResponse]: ...


def add_GatewayServiceServicer_to_server(servicer: GatewayServiceServicer, server: grpc.Server) -> None: ...
