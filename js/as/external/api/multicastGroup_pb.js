/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.exportSymbol('proto.api.AddDeviceToMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.CreateMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.CreateMulticastGroupResponse', null, global);
goog.exportSymbol('proto.api.DeleteMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.EnqueueMulticastQueueItemRequest', null, global);
goog.exportSymbol('proto.api.EnqueueMulticastQueueItemResponse', null, global);
goog.exportSymbol('proto.api.FlushMulticastGroupQueueItemsRequest', null, global);
goog.exportSymbol('proto.api.GetMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.GetMulticastGroupResponse', null, global);
goog.exportSymbol('proto.api.ListMulticastGroupQueueItemsRequest', null, global);
goog.exportSymbol('proto.api.ListMulticastGroupQueueItemsResponse', null, global);
goog.exportSymbol('proto.api.ListMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.ListMulticastGroupResponse', null, global);
goog.exportSymbol('proto.api.MulticastGroup', null, global);
goog.exportSymbol('proto.api.MulticastGroupListItem', null, global);
goog.exportSymbol('proto.api.MulticastGroupType', null, global);
goog.exportSymbol('proto.api.MulticastQueueItem', null, global);
goog.exportSymbol('proto.api.RemoveDeviceFromMulticastGroupRequest', null, global);
goog.exportSymbol('proto.api.UpdateMulticastGroupRequest', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.MulticastGroup = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.MulticastGroup, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.MulticastGroup.displayName = 'proto.api.MulticastGroup';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.MulticastGroup.prototype.toObject = function(opt_includeInstance) {
  return proto.api.MulticastGroup.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.MulticastGroup} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.MulticastGroup.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    mcAddr: msg.getMcAddr(),
    mcNwkSKey: msg.getMcNwkSKey(),
    mcAppSKey: msg.getMcAppSKey(),
    fCnt: msg.getFCnt(),
    groupType: msg.getGroupType(),
    dr: msg.getDr(),
    frequency: msg.getFrequency(),
    pingSlotPeriod: msg.getPingSlotPeriod(),
    applicationId: msg.getApplicationId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.MulticastGroup}
 */
proto.api.MulticastGroup.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.MulticastGroup;
  return proto.api.MulticastGroup.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.MulticastGroup} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.MulticastGroup}
 */
proto.api.MulticastGroup.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcAddr(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcNwkSKey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMcAppSKey(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 7:
      var value = /** @type {!proto.api.MulticastGroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDr(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrequency(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingSlotPeriod(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setApplicationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.MulticastGroup} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastGroup.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.MulticastGroup.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastGroup.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getMcAddr();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getMcNwkSKey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getMcAppSKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getGroupType();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getDr();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getFrequency();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getPingSlotPeriod();
  if (f !== 0) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = this.getApplicationId();
  if (f !== 0) {
    writer.writeInt64(
      12,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.MulticastGroup} The clone.
 */
proto.api.MulticastGroup.prototype.cloneMessage = function() {
  return /** @type {!proto.api.MulticastGroup} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.MulticastGroup.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.MulticastGroup.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.MulticastGroup.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.api.MulticastGroup.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string mc_addr = 3;
 * @return {string}
 */
proto.api.MulticastGroup.prototype.getMcAddr = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.api.MulticastGroup.prototype.setMcAddr = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string mc_nwk_s_key = 4;
 * @return {string}
 */
proto.api.MulticastGroup.prototype.getMcNwkSKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.api.MulticastGroup.prototype.setMcNwkSKey = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string mc_app_s_key = 5;
 * @return {string}
 */
proto.api.MulticastGroup.prototype.getMcAppSKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.api.MulticastGroup.prototype.setMcAppSKey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 f_cnt = 6;
 * @return {number}
 */
proto.api.MulticastGroup.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.api.MulticastGroup.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional MulticastGroupType group_type = 7;
 * @return {!proto.api.MulticastGroupType}
 */
proto.api.MulticastGroup.prototype.getGroupType = function() {
  return /** @type {!proto.api.MulticastGroupType} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.api.MulticastGroupType} value  */
proto.api.MulticastGroup.prototype.setGroupType = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 dr = 8;
 * @return {number}
 */
proto.api.MulticastGroup.prototype.getDr = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.api.MulticastGroup.prototype.setDr = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 frequency = 9;
 * @return {number}
 */
proto.api.MulticastGroup.prototype.getFrequency = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.api.MulticastGroup.prototype.setFrequency = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional uint32 ping_slot_period = 10;
 * @return {number}
 */
proto.api.MulticastGroup.prototype.getPingSlotPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 10, 0));
};


/** @param {number} value  */
proto.api.MulticastGroup.prototype.setPingSlotPeriod = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional int64 application_id = 12;
 * @return {number}
 */
proto.api.MulticastGroup.prototype.getApplicationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.api.MulticastGroup.prototype.setApplicationId = function(value) {
  jspb.Message.setField(this, 12, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.MulticastGroupListItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.MulticastGroupListItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.MulticastGroupListItem.displayName = 'proto.api.MulticastGroupListItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.MulticastGroupListItem.prototype.toObject = function(opt_includeInstance) {
  return proto.api.MulticastGroupListItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.MulticastGroupListItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.MulticastGroupListItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId(),
    name: msg.getName(),
    applicationId: msg.getApplicationId(),
    applicationName: msg.getApplicationName()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.MulticastGroupListItem}
 */
proto.api.MulticastGroupListItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.MulticastGroupListItem;
  return proto.api.MulticastGroupListItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.MulticastGroupListItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.MulticastGroupListItem}
 */
proto.api.MulticastGroupListItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setApplicationId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setApplicationName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.MulticastGroupListItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastGroupListItem.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.MulticastGroupListItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastGroupListItem.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getApplicationId();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = this.getApplicationName();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.MulticastGroupListItem} The clone.
 */
proto.api.MulticastGroupListItem.prototype.cloneMessage = function() {
  return /** @type {!proto.api.MulticastGroupListItem} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.MulticastGroupListItem.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.MulticastGroupListItem.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.api.MulticastGroupListItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.api.MulticastGroupListItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 application_id = 5;
 * @return {number}
 */
proto.api.MulticastGroupListItem.prototype.getApplicationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.api.MulticastGroupListItem.prototype.setApplicationId = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional string application_name = 6;
 * @return {string}
 */
proto.api.MulticastGroupListItem.prototype.getApplicationName = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.api.MulticastGroupListItem.prototype.setApplicationName = function(value) {
  jspb.Message.setField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CreateMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CreateMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.CreateMulticastGroupRequest.displayName = 'proto.api.CreateMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CreateMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CreateMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CreateMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.CreateMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroup: (f = msg.getMulticastGroup()) && proto.api.MulticastGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CreateMulticastGroupRequest}
 */
proto.api.CreateMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CreateMulticastGroupRequest;
  return proto.api.CreateMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CreateMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CreateMulticastGroupRequest}
 */
proto.api.CreateMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MulticastGroup;
      reader.readMessage(value,proto.api.MulticastGroup.deserializeBinaryFromReader);
      msg.setMulticastGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.CreateMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.CreateMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CreateMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.CreateMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.MulticastGroup.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.CreateMulticastGroupRequest} The clone.
 */
proto.api.CreateMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.CreateMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MulticastGroup multicast_group = 1;
 * @return {proto.api.MulticastGroup}
 */
proto.api.CreateMulticastGroupRequest.prototype.getMulticastGroup = function() {
  return /** @type{proto.api.MulticastGroup} */ (
    jspb.Message.getWrapperField(this, proto.api.MulticastGroup, 1));
};


/** @param {proto.api.MulticastGroup|undefined} value  */
proto.api.CreateMulticastGroupRequest.prototype.setMulticastGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.CreateMulticastGroupRequest.prototype.clearMulticastGroup = function() {
  this.setMulticastGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.CreateMulticastGroupRequest.prototype.hasMulticastGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.CreateMulticastGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.CreateMulticastGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.CreateMulticastGroupResponse.displayName = 'proto.api.CreateMulticastGroupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.CreateMulticastGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.CreateMulticastGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.CreateMulticastGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.CreateMulticastGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.CreateMulticastGroupResponse}
 */
proto.api.CreateMulticastGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.CreateMulticastGroupResponse;
  return proto.api.CreateMulticastGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.CreateMulticastGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.CreateMulticastGroupResponse}
 */
proto.api.CreateMulticastGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.CreateMulticastGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.CreateMulticastGroupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.CreateMulticastGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.CreateMulticastGroupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.CreateMulticastGroupResponse} The clone.
 */
proto.api.CreateMulticastGroupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.api.CreateMulticastGroupResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.CreateMulticastGroupResponse.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.CreateMulticastGroupResponse.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.GetMulticastGroupRequest.displayName = 'proto.api.GetMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.GetMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetMulticastGroupRequest}
 */
proto.api.GetMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetMulticastGroupRequest;
  return proto.api.GetMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetMulticastGroupRequest}
 */
proto.api.GetMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.GetMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.GetMulticastGroupRequest} The clone.
 */
proto.api.GetMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.GetMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.GetMulticastGroupRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.GetMulticastGroupRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.GetMulticastGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.GetMulticastGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.GetMulticastGroupResponse.displayName = 'proto.api.GetMulticastGroupResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.GetMulticastGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.GetMulticastGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.GetMulticastGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.GetMulticastGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroup: (f = msg.getMulticastGroup()) && proto.api.MulticastGroup.toObject(includeInstance, f),
    createdAt: (f = msg.getCreatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    updatedAt: (f = msg.getUpdatedAt()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.GetMulticastGroupResponse}
 */
proto.api.GetMulticastGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.GetMulticastGroupResponse;
  return proto.api.GetMulticastGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.GetMulticastGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.GetMulticastGroupResponse}
 */
proto.api.GetMulticastGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MulticastGroup;
      reader.readMessage(value,proto.api.MulticastGroup.deserializeBinaryFromReader);
      msg.setMulticastGroup(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreatedAt(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setUpdatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.GetMulticastGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetMulticastGroupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.GetMulticastGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.GetMulticastGroupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.MulticastGroup.serializeBinaryToWriter
    );
  }
  f = this.getCreatedAt();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = this.getUpdatedAt();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.GetMulticastGroupResponse} The clone.
 */
proto.api.GetMulticastGroupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.api.GetMulticastGroupResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MulticastGroup multicast_group = 1;
 * @return {proto.api.MulticastGroup}
 */
proto.api.GetMulticastGroupResponse.prototype.getMulticastGroup = function() {
  return /** @type{proto.api.MulticastGroup} */ (
    jspb.Message.getWrapperField(this, proto.api.MulticastGroup, 1));
};


/** @param {proto.api.MulticastGroup|undefined} value  */
proto.api.GetMulticastGroupResponse.prototype.setMulticastGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.GetMulticastGroupResponse.prototype.clearMulticastGroup = function() {
  this.setMulticastGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.GetMulticastGroupResponse.prototype.hasMulticastGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.Timestamp created_at = 2;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.api.GetMulticastGroupResponse.prototype.getCreatedAt = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.api.GetMulticastGroupResponse.prototype.setCreatedAt = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.api.GetMulticastGroupResponse.prototype.clearCreatedAt = function() {
  this.setCreatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.GetMulticastGroupResponse.prototype.hasCreatedAt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp updated_at = 3;
 * @return {proto.google.protobuf.Timestamp}
 */
proto.api.GetMulticastGroupResponse.prototype.getUpdatedAt = function() {
  return /** @type{proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {proto.google.protobuf.Timestamp|undefined} value  */
proto.api.GetMulticastGroupResponse.prototype.setUpdatedAt = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.api.GetMulticastGroupResponse.prototype.clearUpdatedAt = function() {
  this.setUpdatedAt(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.GetMulticastGroupResponse.prototype.hasUpdatedAt = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.UpdateMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.UpdateMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.UpdateMulticastGroupRequest.displayName = 'proto.api.UpdateMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.UpdateMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.UpdateMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.UpdateMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.UpdateMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroup: (f = msg.getMulticastGroup()) && proto.api.MulticastGroup.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.UpdateMulticastGroupRequest}
 */
proto.api.UpdateMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.UpdateMulticastGroupRequest;
  return proto.api.UpdateMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.UpdateMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.UpdateMulticastGroupRequest}
 */
proto.api.UpdateMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MulticastGroup;
      reader.readMessage(value,proto.api.MulticastGroup.deserializeBinaryFromReader);
      msg.setMulticastGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.UpdateMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.UpdateMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.UpdateMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.UpdateMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroup();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.MulticastGroup.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.UpdateMulticastGroupRequest} The clone.
 */
proto.api.UpdateMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.UpdateMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MulticastGroup multicast_group = 1;
 * @return {proto.api.MulticastGroup}
 */
proto.api.UpdateMulticastGroupRequest.prototype.getMulticastGroup = function() {
  return /** @type{proto.api.MulticastGroup} */ (
    jspb.Message.getWrapperField(this, proto.api.MulticastGroup, 1));
};


/** @param {proto.api.MulticastGroup|undefined} value  */
proto.api.UpdateMulticastGroupRequest.prototype.setMulticastGroup = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.UpdateMulticastGroupRequest.prototype.clearMulticastGroup = function() {
  this.setMulticastGroup(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.UpdateMulticastGroupRequest.prototype.hasMulticastGroup = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.DeleteMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.DeleteMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.DeleteMulticastGroupRequest.displayName = 'proto.api.DeleteMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.DeleteMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.DeleteMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.DeleteMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.DeleteMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.DeleteMulticastGroupRequest}
 */
proto.api.DeleteMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.DeleteMulticastGroupRequest;
  return proto.api.DeleteMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.DeleteMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.DeleteMulticastGroupRequest}
 */
proto.api.DeleteMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.DeleteMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.DeleteMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.DeleteMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.DeleteMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.DeleteMulticastGroupRequest} The clone.
 */
proto.api.DeleteMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.DeleteMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.api.DeleteMulticastGroupRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.DeleteMulticastGroupRequest.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.AddDeviceToMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.AddDeviceToMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.AddDeviceToMulticastGroupRequest.displayName = 'proto.api.AddDeviceToMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.AddDeviceToMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.AddDeviceToMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.AddDeviceToMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroupId: msg.getMulticastGroupId(),
    devEui: msg.getDevEui()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.AddDeviceToMulticastGroupRequest}
 */
proto.api.AddDeviceToMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.AddDeviceToMulticastGroupRequest;
  return proto.api.AddDeviceToMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.AddDeviceToMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.AddDeviceToMulticastGroupRequest}
 */
proto.api.AddDeviceToMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMulticastGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevEui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.AddDeviceToMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.AddDeviceToMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDevEui();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.AddDeviceToMulticastGroupRequest} The clone.
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.AddDeviceToMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string multicast_group_id = 1;
 * @return {string}
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.getMulticastGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.AddDeviceToMulticastGroupRequest.prototype.setMulticastGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string dev_eui = 2;
 * @return {string}
 */
proto.api.AddDeviceToMulticastGroupRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.api.AddDeviceToMulticastGroupRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.RemoveDeviceFromMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.RemoveDeviceFromMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.RemoveDeviceFromMulticastGroupRequest.displayName = 'proto.api.RemoveDeviceFromMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.RemoveDeviceFromMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.RemoveDeviceFromMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroupId: msg.getMulticastGroupId(),
    devEui: msg.getDevEui()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.RemoveDeviceFromMulticastGroupRequest}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.RemoveDeviceFromMulticastGroupRequest;
  return proto.api.RemoveDeviceFromMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.RemoveDeviceFromMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.RemoveDeviceFromMulticastGroupRequest}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMulticastGroupId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevEui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.RemoveDeviceFromMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getDevEui();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.RemoveDeviceFromMulticastGroupRequest} The clone.
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.RemoveDeviceFromMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string multicast_group_id = 1;
 * @return {string}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.getMulticastGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.setMulticastGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string dev_eui = 2;
 * @return {string}
 */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.api.RemoveDeviceFromMulticastGroupRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListMulticastGroupRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ListMulticastGroupRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ListMulticastGroupRequest.displayName = 'proto.api.ListMulticastGroupRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListMulticastGroupRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListMulticastGroupRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListMulticastGroupRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.ListMulticastGroupRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: msg.getLimit(),
    offset: msg.getOffset(),
    organizationId: msg.getOrganizationId(),
    devEui: msg.getDevEui(),
    search: msg.getSearch(),
    applicationId: msg.getApplicationId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListMulticastGroupRequest}
 */
proto.api.ListMulticastGroupRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListMulticastGroupRequest;
  return proto.api.ListMulticastGroupRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListMulticastGroupRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListMulticastGroupRequest}
 */
proto.api.ListMulticastGroupRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOffset(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOrganizationId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setDevEui(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearch(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setApplicationId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.ListMulticastGroupRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListMulticastGroupRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLimit();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getOffset();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = this.getOrganizationId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = this.getDevEui();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getSearch();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = this.getApplicationId();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.ListMulticastGroupRequest} The clone.
 */
proto.api.ListMulticastGroupRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.ListMulticastGroupRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 limit = 1;
 * @return {number}
 */
proto.api.ListMulticastGroupRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.api.ListMulticastGroupRequest.prototype.setLimit = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional int64 offset = 2;
 * @return {number}
 */
proto.api.ListMulticastGroupRequest.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.api.ListMulticastGroupRequest.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional int64 organization_id = 3;
 * @return {number}
 */
proto.api.ListMulticastGroupRequest.prototype.getOrganizationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.api.ListMulticastGroupRequest.prototype.setOrganizationId = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string dev_eui = 4;
 * @return {string}
 */
proto.api.ListMulticastGroupRequest.prototype.getDevEui = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.api.ListMulticastGroupRequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string search = 6;
 * @return {string}
 */
proto.api.ListMulticastGroupRequest.prototype.getSearch = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 6, ""));
};


/** @param {string} value  */
proto.api.ListMulticastGroupRequest.prototype.setSearch = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional int64 application_id = 7;
 * @return {number}
 */
proto.api.ListMulticastGroupRequest.prototype.getApplicationId = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {number} value  */
proto.api.ListMulticastGroupRequest.prototype.setApplicationId = function(value) {
  jspb.Message.setField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListMulticastGroupResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ListMulticastGroupResponse.repeatedFields_, null);
};
goog.inherits(proto.api.ListMulticastGroupResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ListMulticastGroupResponse.displayName = 'proto.api.ListMulticastGroupResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ListMulticastGroupResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListMulticastGroupResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListMulticastGroupResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListMulticastGroupResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.ListMulticastGroupResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    totalCount: msg.getTotalCount(),
    resultList: jspb.Message.toObjectList(msg.getResultList(),
    proto.api.MulticastGroupListItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListMulticastGroupResponse}
 */
proto.api.ListMulticastGroupResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListMulticastGroupResponse;
  return proto.api.ListMulticastGroupResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListMulticastGroupResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListMulticastGroupResponse}
 */
proto.api.ListMulticastGroupResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalCount(value);
      break;
    case 2:
      var value = new proto.api.MulticastGroupListItem;
      reader.readMessage(value,proto.api.MulticastGroupListItem.deserializeBinaryFromReader);
      msg.getResultList().push(value);
      msg.setResultList(msg.getResultList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.ListMulticastGroupResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListMulticastGroupResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getTotalCount();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = this.getResultList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.api.MulticastGroupListItem.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.ListMulticastGroupResponse} The clone.
 */
proto.api.ListMulticastGroupResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.api.ListMulticastGroupResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional int64 total_count = 1;
 * @return {number}
 */
proto.api.ListMulticastGroupResponse.prototype.getTotalCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.api.ListMulticastGroupResponse.prototype.setTotalCount = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated MulticastGroupListItem result = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.api.MulticastGroupListItem>}
 */
proto.api.ListMulticastGroupResponse.prototype.getResultList = function() {
  return /** @type{!Array.<!proto.api.MulticastGroupListItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.MulticastGroupListItem, 2));
};


/** @param {Array.<!proto.api.MulticastGroupListItem>} value  */
proto.api.ListMulticastGroupResponse.prototype.setResultList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.api.ListMulticastGroupResponse.prototype.clearResultList = function() {
  this.setResultList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.MulticastQueueItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.MulticastQueueItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.MulticastQueueItem.displayName = 'proto.api.MulticastQueueItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.MulticastQueueItem.prototype.toObject = function(opt_includeInstance) {
  return proto.api.MulticastQueueItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.MulticastQueueItem} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.MulticastQueueItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroupId: msg.getMulticastGroupId(),
    fCnt: msg.getFCnt(),
    fPort: msg.getFPort(),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.MulticastQueueItem}
 */
proto.api.MulticastQueueItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.MulticastQueueItem;
  return proto.api.MulticastQueueItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.MulticastQueueItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.MulticastQueueItem}
 */
proto.api.MulticastQueueItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMulticastGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFPort(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.MulticastQueueItem} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastQueueItem.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.MulticastQueueItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.MulticastQueueItem.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getFPort();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.MulticastQueueItem} The clone.
 */
proto.api.MulticastQueueItem.prototype.cloneMessage = function() {
  return /** @type {!proto.api.MulticastQueueItem} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string multicast_group_id = 1;
 * @return {string}
 */
proto.api.MulticastQueueItem.prototype.getMulticastGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.MulticastQueueItem.prototype.setMulticastGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 f_cnt = 2;
 * @return {number}
 */
proto.api.MulticastQueueItem.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.api.MulticastQueueItem.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 f_port = 3;
 * @return {number}
 */
proto.api.MulticastQueueItem.prototype.getFPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.api.MulticastQueueItem.prototype.setFPort = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional bytes data = 4;
 * @return {!(string|Uint8Array)}
 */
proto.api.MulticastQueueItem.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/**
 * optional bytes data = 4;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.api.MulticastQueueItem.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.api.MulticastQueueItem.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.api.MulticastQueueItem.prototype.setData = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EnqueueMulticastQueueItemRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EnqueueMulticastQueueItemRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.EnqueueMulticastQueueItemRequest.displayName = 'proto.api.EnqueueMulticastQueueItemRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EnqueueMulticastQueueItemRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EnqueueMulticastQueueItemRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.EnqueueMulticastQueueItemRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastQueueItem: (f = msg.getMulticastQueueItem()) && proto.api.MulticastQueueItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EnqueueMulticastQueueItemRequest}
 */
proto.api.EnqueueMulticastQueueItemRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EnqueueMulticastQueueItemRequest;
  return proto.api.EnqueueMulticastQueueItemRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EnqueueMulticastQueueItemRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EnqueueMulticastQueueItemRequest}
 */
proto.api.EnqueueMulticastQueueItemRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MulticastQueueItem;
      reader.readMessage(value,proto.api.MulticastQueueItem.deserializeBinaryFromReader);
      msg.setMulticastQueueItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.EnqueueMulticastQueueItemRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EnqueueMulticastQueueItemRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastQueueItem();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.api.MulticastQueueItem.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.EnqueueMulticastQueueItemRequest} The clone.
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.EnqueueMulticastQueueItemRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional MulticastQueueItem multicast_queue_item = 1;
 * @return {proto.api.MulticastQueueItem}
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.getMulticastQueueItem = function() {
  return /** @type{proto.api.MulticastQueueItem} */ (
    jspb.Message.getWrapperField(this, proto.api.MulticastQueueItem, 1));
};


/** @param {proto.api.MulticastQueueItem|undefined} value  */
proto.api.EnqueueMulticastQueueItemRequest.prototype.setMulticastQueueItem = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.api.EnqueueMulticastQueueItemRequest.prototype.clearMulticastQueueItem = function() {
  this.setMulticastQueueItem(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.api.EnqueueMulticastQueueItemRequest.prototype.hasMulticastQueueItem = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.EnqueueMulticastQueueItemResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.EnqueueMulticastQueueItemResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.EnqueueMulticastQueueItemResponse.displayName = 'proto.api.EnqueueMulticastQueueItemResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.EnqueueMulticastQueueItemResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.EnqueueMulticastQueueItemResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.EnqueueMulticastQueueItemResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.EnqueueMulticastQueueItemResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    fCnt: msg.getFCnt()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.EnqueueMulticastQueueItemResponse}
 */
proto.api.EnqueueMulticastQueueItemResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.EnqueueMulticastQueueItemResponse;
  return proto.api.EnqueueMulticastQueueItemResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.EnqueueMulticastQueueItemResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.EnqueueMulticastQueueItemResponse}
 */
proto.api.EnqueueMulticastQueueItemResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFCnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.EnqueueMulticastQueueItemResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EnqueueMulticastQueueItemResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.EnqueueMulticastQueueItemResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.EnqueueMulticastQueueItemResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFCnt();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.EnqueueMulticastQueueItemResponse} The clone.
 */
proto.api.EnqueueMulticastQueueItemResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.api.EnqueueMulticastQueueItemResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional uint32 f_cnt = 1;
 * @return {number}
 */
proto.api.EnqueueMulticastQueueItemResponse.prototype.getFCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 1, 0));
};


/** @param {number} value  */
proto.api.EnqueueMulticastQueueItemResponse.prototype.setFCnt = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.FlushMulticastGroupQueueItemsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.FlushMulticastGroupQueueItemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.FlushMulticastGroupQueueItemsRequest.displayName = 'proto.api.FlushMulticastGroupQueueItemsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.FlushMulticastGroupQueueItemsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.FlushMulticastGroupQueueItemsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroupId: msg.getMulticastGroupId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.FlushMulticastGroupQueueItemsRequest}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.FlushMulticastGroupQueueItemsRequest;
  return proto.api.FlushMulticastGroupQueueItemsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.FlushMulticastGroupQueueItemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.FlushMulticastGroupQueueItemsRequest}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMulticastGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.FlushMulticastGroupQueueItemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FlushMulticastGroupQueueItemsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.FlushMulticastGroupQueueItemsRequest} The clone.
 */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.FlushMulticastGroupQueueItemsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string multicast_group_id = 1;
 * @return {string}
 */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.getMulticastGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.FlushMulticastGroupQueueItemsRequest.prototype.setMulticastGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListMulticastGroupQueueItemsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.api.ListMulticastGroupQueueItemsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ListMulticastGroupQueueItemsRequest.displayName = 'proto.api.ListMulticastGroupQueueItemsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListMulticastGroupQueueItemsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListMulticastGroupQueueItemsRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.ListMulticastGroupQueueItemsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastGroupId: msg.getMulticastGroupId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListMulticastGroupQueueItemsRequest}
 */
proto.api.ListMulticastGroupQueueItemsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListMulticastGroupQueueItemsRequest;
  return proto.api.ListMulticastGroupQueueItemsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListMulticastGroupQueueItemsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListMulticastGroupQueueItemsRequest}
 */
proto.api.ListMulticastGroupQueueItemsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMulticastGroupId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.ListMulticastGroupQueueItemsRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupQueueItemsRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastGroupId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.ListMulticastGroupQueueItemsRequest} The clone.
 */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.api.ListMulticastGroupQueueItemsRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional string multicast_group_id = 1;
 * @return {string}
 */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.getMulticastGroupId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/** @param {string} value  */
proto.api.ListMulticastGroupQueueItemsRequest.prototype.setMulticastGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.api.ListMulticastGroupQueueItemsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.api.ListMulticastGroupQueueItemsResponse.repeatedFields_, null);
};
goog.inherits(proto.api.ListMulticastGroupQueueItemsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.api.ListMulticastGroupQueueItemsResponse.displayName = 'proto.api.ListMulticastGroupQueueItemsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.api.ListMulticastGroupQueueItemsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.api.ListMulticastGroupQueueItemsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.api.ListMulticastGroupQueueItemsResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.api.ListMulticastGroupQueueItemsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    multicastQueueItemsList: jspb.Message.toObjectList(msg.getMulticastQueueItemsList(),
    proto.api.MulticastQueueItem.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.api.ListMulticastGroupQueueItemsResponse}
 */
proto.api.ListMulticastGroupQueueItemsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.api.ListMulticastGroupQueueItemsResponse;
  return proto.api.ListMulticastGroupQueueItemsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.api.ListMulticastGroupQueueItemsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.api.ListMulticastGroupQueueItemsResponse}
 */
proto.api.ListMulticastGroupQueueItemsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.api.MulticastQueueItem;
      reader.readMessage(value,proto.api.MulticastQueueItem.deserializeBinaryFromReader);
      msg.getMulticastQueueItemsList().push(value);
      msg.setMulticastQueueItemsList(msg.getMulticastQueueItemsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.api.ListMulticastGroupQueueItemsResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupQueueItemsResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getMulticastQueueItemsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.api.MulticastQueueItem.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.api.ListMulticastGroupQueueItemsResponse} The clone.
 */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.api.ListMulticastGroupQueueItemsResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated MulticastQueueItem multicast_queue_items = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.api.MulticastQueueItem>}
 */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.getMulticastQueueItemsList = function() {
  return /** @type{!Array.<!proto.api.MulticastQueueItem>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.api.MulticastQueueItem, 1));
};


/** @param {Array.<!proto.api.MulticastQueueItem>} value  */
proto.api.ListMulticastGroupQueueItemsResponse.prototype.setMulticastQueueItemsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.api.ListMulticastGroupQueueItemsResponse.prototype.clearMulticastQueueItemsList = function() {
  this.setMulticastQueueItemsList([]);
};


/**
 * @enum {number}
 */
proto.api.MulticastGroupType = {
  CLASS_C: 0,
  CLASS_B: 1
};

goog.object.extend(exports, proto.api);
