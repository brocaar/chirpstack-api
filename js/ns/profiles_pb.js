/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ns.DeviceProfile', null, global);
goog.exportSymbol('proto.ns.RatePolicy', null, global);
goog.exportSymbol('proto.ns.RoutingProfile', null, global);
goog.exportSymbol('proto.ns.ServiceProfile', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ns.ServiceProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ns.ServiceProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ns.ServiceProfile.displayName = 'proto.ns.ServiceProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ns.ServiceProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.ns.ServiceProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ns.ServiceProfile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ns.ServiceProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    ulRate: msg.getUlRate(),
    ulBucketSize: msg.getUlBucketSize(),
    ulRatePolicy: msg.getUlRatePolicy(),
    dlRate: msg.getDlRate(),
    dlBucketSize: msg.getDlBucketSize(),
    dlRatePolicy: msg.getDlRatePolicy(),
    addGwMetadata: msg.getAddGwMetadata(),
    devStatusReqFreq: msg.getDevStatusReqFreq(),
    reportDevStatusBattery: msg.getReportDevStatusBattery(),
    reportDevStatusMargin: msg.getReportDevStatusMargin(),
    drMin: msg.getDrMin(),
    drMax: msg.getDrMax(),
    channelMask: msg.getChannelMask_asB64(),
    prAllowed: msg.getPrAllowed(),
    hrAllowed: msg.getHrAllowed(),
    raAllowed: msg.getRaAllowed(),
    nwkGeoLoc: msg.getNwkGeoLoc(),
    targetPer: msg.getTargetPer(),
    minGwDiversity: msg.getMinGwDiversity(),
    gwsPrivate: msg.getGwsPrivate()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ns.ServiceProfile}
 */
proto.ns.ServiceProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ns.ServiceProfile;
  return proto.ns.ServiceProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ns.ServiceProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ns.ServiceProfile}
 */
proto.ns.ServiceProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUlRate(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUlBucketSize(value);
      break;
    case 4:
      var value = /** @type {!proto.ns.RatePolicy} */ (reader.readEnum());
      msg.setUlRatePolicy(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDlRate(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDlBucketSize(value);
      break;
    case 7:
      var value = /** @type {!proto.ns.RatePolicy} */ (reader.readEnum());
      msg.setDlRatePolicy(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAddGwMetadata(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDevStatusReqFreq(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReportDevStatusBattery(value);
      break;
    case 11:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReportDevStatusMargin(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDrMin(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDrMax(value);
      break;
    case 14:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelMask(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPrAllowed(value);
      break;
    case 16:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHrAllowed(value);
      break;
    case 17:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setRaAllowed(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNwkGeoLoc(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTargetPer(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinGwDiversity(value);
      break;
    case 21:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setGwsPrivate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ns.ServiceProfile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.ServiceProfile.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ns.ServiceProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.ServiceProfile.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getUlRate();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = this.getUlBucketSize();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getUlRatePolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = this.getDlRate();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getDlBucketSize();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getDlRatePolicy();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = this.getAddGwMetadata();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = this.getDevStatusReqFreq();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = this.getReportDevStatusBattery();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = this.getReportDevStatusMargin();
  if (f) {
    writer.writeBool(
      11,
      f
    );
  }
  f = this.getDrMin();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = this.getDrMax();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = this.getChannelMask_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      14,
      f
    );
  }
  f = this.getPrAllowed();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = this.getHrAllowed();
  if (f) {
    writer.writeBool(
      16,
      f
    );
  }
  f = this.getRaAllowed();
  if (f) {
    writer.writeBool(
      17,
      f
    );
  }
  f = this.getNwkGeoLoc();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = this.getTargetPer();
  if (f !== 0) {
    writer.writeUint32(
      19,
      f
    );
  }
  f = this.getMinGwDiversity();
  if (f !== 0) {
    writer.writeUint32(
      20,
      f
    );
  }
  f = this.getGwsPrivate();
  if (f) {
    writer.writeBool(
      21,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ns.ServiceProfile} The clone.
 */
proto.ns.ServiceProfile.prototype.cloneMessage = function() {
  return /** @type {!proto.ns.ServiceProfile} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ns.ServiceProfile.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ns.ServiceProfile.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ns.ServiceProfile.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ns.ServiceProfile.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional uint32 ul_rate = 2;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getUlRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 2, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setUlRate = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 ul_bucket_size = 3;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getUlBucketSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setUlBucketSize = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional RatePolicy ul_rate_policy = 4;
 * @return {!proto.ns.RatePolicy}
 */
proto.ns.ServiceProfile.prototype.getUlRatePolicy = function() {
  return /** @type {!proto.ns.RatePolicy} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {!proto.ns.RatePolicy} value  */
proto.ns.ServiceProfile.prototype.setUlRatePolicy = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 dl_rate = 5;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getDlRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setDlRate = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 dl_bucket_size = 6;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getDlBucketSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setDlBucketSize = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional RatePolicy dl_rate_policy = 7;
 * @return {!proto.ns.RatePolicy}
 */
proto.ns.ServiceProfile.prototype.getDlRatePolicy = function() {
  return /** @type {!proto.ns.RatePolicy} */ (jspb.Message.getFieldProto3(this, 7, 0));
};


/** @param {!proto.ns.RatePolicy} value  */
proto.ns.ServiceProfile.prototype.setDlRatePolicy = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional bool add_gw_metadata = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getAddGwMetadata = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 8, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setAddGwMetadata = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional uint32 dev_status_req_freq = 9;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getDevStatusReqFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 9, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setDevStatusReqFreq = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional bool report_dev_status_battery = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getReportDevStatusBattery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 10, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setReportDevStatusBattery = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional bool report_dev_status_margin = 11;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getReportDevStatusMargin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 11, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setReportDevStatusMargin = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint32 dr_min = 12;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getDrMin = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setDrMin = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint32 dr_max = 13;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getDrMax = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setDrMax = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional bytes channel_mask = 14;
 * @return {!(string|Uint8Array)}
 */
proto.ns.ServiceProfile.prototype.getChannelMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 14, ""));
};


/**
 * optional bytes channel_mask = 14;
 * This is a type-conversion wrapper around `getChannelMask()`
 * @return {string}
 */
proto.ns.ServiceProfile.prototype.getChannelMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelMask()));
};


/**
 * optional bytes channel_mask = 14;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelMask()`
 * @return {!Uint8Array}
 */
proto.ns.ServiceProfile.prototype.getChannelMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelMask()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ns.ServiceProfile.prototype.setChannelMask = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * optional bool pr_allowed = 15;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getPrAllowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 15, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setPrAllowed = function(value) {
  jspb.Message.setField(this, 15, value);
};


/**
 * optional bool hr_allowed = 16;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getHrAllowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 16, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setHrAllowed = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional bool ra_allowed = 17;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getRaAllowed = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 17, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setRaAllowed = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool nwk_geo_loc = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getNwkGeoLoc = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 18, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setNwkGeoLoc = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional uint32 target_per = 19;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getTargetPer = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 19, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setTargetPer = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional uint32 min_gw_diversity = 20;
 * @return {number}
 */
proto.ns.ServiceProfile.prototype.getMinGwDiversity = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 20, 0));
};


/** @param {number} value  */
proto.ns.ServiceProfile.prototype.setMinGwDiversity = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional bool gws_private = 21;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.ServiceProfile.prototype.getGwsPrivate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 21, false));
};


/** @param {boolean} value  */
proto.ns.ServiceProfile.prototype.setGwsPrivate = function(value) {
  jspb.Message.setField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ns.DeviceProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ns.DeviceProfile.repeatedFields_, null);
};
goog.inherits(proto.ns.DeviceProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ns.DeviceProfile.displayName = 'proto.ns.DeviceProfile';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ns.DeviceProfile.repeatedFields_ = [15];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ns.DeviceProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.ns.DeviceProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ns.DeviceProfile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ns.DeviceProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    supportsClassB: msg.getSupportsClassB(),
    classBTimeout: msg.getClassBTimeout(),
    pingSlotPeriod: msg.getPingSlotPeriod(),
    pingSlotDr: msg.getPingSlotDr(),
    pingSlotFreq: msg.getPingSlotFreq(),
    supportsClassC: msg.getSupportsClassC(),
    classCTimeout: msg.getClassCTimeout(),
    macVersion: msg.getMacVersion(),
    regParamsRevision: msg.getRegParamsRevision(),
    rxDelay1: msg.getRxDelay1(),
    rxDrOffset1: msg.getRxDrOffset1(),
    rxDatarate2: msg.getRxDatarate2(),
    rxFreq2: msg.getRxFreq2(),
    factoryPresetFreqsList: jspb.Message.getField(msg, 15),
    maxEirp: msg.getMaxEirp(),
    maxDutyCycle: msg.getMaxDutyCycle(),
    supportsJoin: msg.getSupportsJoin(),
    rfRegion: msg.getRfRegion(),
    supports32bitFCnt: msg.getSupports32bitFCnt(),
    adrAlgorithmId: msg.getAdrAlgorithmId()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ns.DeviceProfile}
 */
proto.ns.DeviceProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ns.DeviceProfile;
  return proto.ns.DeviceProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ns.DeviceProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ns.DeviceProfile}
 */
proto.ns.DeviceProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsClassB(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClassBTimeout(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingSlotPeriod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingSlotDr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPingSlotFreq(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsClassC(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setClassCTimeout(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setMacVersion(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegParamsRevision(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxDelay1(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxDrOffset1(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxDatarate2(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRxFreq2(value);
      break;
    case 15:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setFactoryPresetFreqsList(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxEirp(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxDutyCycle(value);
      break;
    case 18:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupportsJoin(value);
      break;
    case 19:
      var value = /** @type {string} */ (reader.readString());
      msg.setRfRegion(value);
      break;
    case 20:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSupports32bitFCnt(value);
      break;
    case 21:
      var value = /** @type {string} */ (reader.readString());
      msg.setAdrAlgorithmId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ns.DeviceProfile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.DeviceProfile.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ns.DeviceProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.DeviceProfile.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getSupportsClassB();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = this.getClassBTimeout();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = this.getPingSlotPeriod();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getPingSlotDr();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = this.getPingSlotFreq();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = this.getSupportsClassC();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getClassCTimeout();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = this.getMacVersion();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = this.getRegParamsRevision();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = this.getRxDelay1();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = this.getRxDrOffset1();
  if (f !== 0) {
    writer.writeUint32(
      12,
      f
    );
  }
  f = this.getRxDatarate2();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = this.getRxFreq2();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = this.getFactoryPresetFreqsList();
  if (f.length > 0) {
    writer.writePackedUint32(
      15,
      f
    );
  }
  f = this.getMaxEirp();
  if (f !== 0) {
    writer.writeUint32(
      16,
      f
    );
  }
  f = this.getMaxDutyCycle();
  if (f !== 0) {
    writer.writeUint32(
      17,
      f
    );
  }
  f = this.getSupportsJoin();
  if (f) {
    writer.writeBool(
      18,
      f
    );
  }
  f = this.getRfRegion();
  if (f.length > 0) {
    writer.writeString(
      19,
      f
    );
  }
  f = this.getSupports32bitFCnt();
  if (f) {
    writer.writeBool(
      20,
      f
    );
  }
  f = this.getAdrAlgorithmId();
  if (f.length > 0) {
    writer.writeString(
      21,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ns.DeviceProfile} The clone.
 */
proto.ns.DeviceProfile.prototype.cloneMessage = function() {
  return /** @type {!proto.ns.DeviceProfile} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ns.DeviceProfile.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ns.DeviceProfile.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ns.DeviceProfile.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ns.DeviceProfile.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool supports_class_b = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.DeviceProfile.prototype.getSupportsClassB = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 2, false));
};


/** @param {boolean} value  */
proto.ns.DeviceProfile.prototype.setSupportsClassB = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional uint32 class_b_timeout = 3;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getClassBTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setClassBTimeout = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional uint32 ping_slot_period = 4;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getPingSlotPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 4, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setPingSlotPeriod = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional uint32 ping_slot_dr = 5;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getPingSlotDr = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 5, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setPingSlotDr = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * optional uint32 ping_slot_freq = 6;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getPingSlotFreq = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 6, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setPingSlotFreq = function(value) {
  jspb.Message.setField(this, 6, value);
};


/**
 * optional bool supports_class_c = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.DeviceProfile.prototype.getSupportsClassC = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 7, false));
};


/** @param {boolean} value  */
proto.ns.DeviceProfile.prototype.setSupportsClassC = function(value) {
  jspb.Message.setField(this, 7, value);
};


/**
 * optional uint32 class_c_timeout = 8;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getClassCTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 8, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setClassCTimeout = function(value) {
  jspb.Message.setField(this, 8, value);
};


/**
 * optional string mac_version = 9;
 * @return {string}
 */
proto.ns.DeviceProfile.prototype.getMacVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 9, ""));
};


/** @param {string} value  */
proto.ns.DeviceProfile.prototype.setMacVersion = function(value) {
  jspb.Message.setField(this, 9, value);
};


/**
 * optional string reg_params_revision = 10;
 * @return {string}
 */
proto.ns.DeviceProfile.prototype.getRegParamsRevision = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 10, ""));
};


/** @param {string} value  */
proto.ns.DeviceProfile.prototype.setRegParamsRevision = function(value) {
  jspb.Message.setField(this, 10, value);
};


/**
 * optional uint32 rx_delay_1 = 11;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getRxDelay1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 11, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setRxDelay1 = function(value) {
  jspb.Message.setField(this, 11, value);
};


/**
 * optional uint32 rx_dr_offset_1 = 12;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getRxDrOffset1 = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 12, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setRxDrOffset1 = function(value) {
  jspb.Message.setField(this, 12, value);
};


/**
 * optional uint32 rx_datarate_2 = 13;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getRxDatarate2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 13, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setRxDatarate2 = function(value) {
  jspb.Message.setField(this, 13, value);
};


/**
 * optional uint32 rx_freq_2 = 14;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getRxFreq2 = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 14, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setRxFreq2 = function(value) {
  jspb.Message.setField(this, 14, value);
};


/**
 * repeated uint32 factory_preset_freqs = 15;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<number>}
 */
proto.ns.DeviceProfile.prototype.getFactoryPresetFreqsList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getField(this, 15));
};


/** @param {Array.<number>} value  */
proto.ns.DeviceProfile.prototype.setFactoryPresetFreqsList = function(value) {
  jspb.Message.setField(this, 15, value || []);
};


proto.ns.DeviceProfile.prototype.clearFactoryPresetFreqsList = function() {
  jspb.Message.setField(this, 15, []);
};


/**
 * optional uint32 max_eirp = 16;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getMaxEirp = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 16, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setMaxEirp = function(value) {
  jspb.Message.setField(this, 16, value);
};


/**
 * optional uint32 max_duty_cycle = 17;
 * @return {number}
 */
proto.ns.DeviceProfile.prototype.getMaxDutyCycle = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 17, 0));
};


/** @param {number} value  */
proto.ns.DeviceProfile.prototype.setMaxDutyCycle = function(value) {
  jspb.Message.setField(this, 17, value);
};


/**
 * optional bool supports_join = 18;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.DeviceProfile.prototype.getSupportsJoin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 18, false));
};


/** @param {boolean} value  */
proto.ns.DeviceProfile.prototype.setSupportsJoin = function(value) {
  jspb.Message.setField(this, 18, value);
};


/**
 * optional string rf_region = 19;
 * @return {string}
 */
proto.ns.DeviceProfile.prototype.getRfRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 19, ""));
};


/** @param {string} value  */
proto.ns.DeviceProfile.prototype.setRfRegion = function(value) {
  jspb.Message.setField(this, 19, value);
};


/**
 * optional bool supports_32bit_f_cnt = 20;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.ns.DeviceProfile.prototype.getSupports32bitFCnt = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldProto3(this, 20, false));
};


/** @param {boolean} value  */
proto.ns.DeviceProfile.prototype.setSupports32bitFCnt = function(value) {
  jspb.Message.setField(this, 20, value);
};


/**
 * optional string adr_algorithm_id = 21;
 * @return {string}
 */
proto.ns.DeviceProfile.prototype.getAdrAlgorithmId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 21, ""));
};


/** @param {string} value  */
proto.ns.DeviceProfile.prototype.setAdrAlgorithmId = function(value) {
  jspb.Message.setField(this, 21, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ns.RoutingProfile = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ns.RoutingProfile, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ns.RoutingProfile.displayName = 'proto.ns.RoutingProfile';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ns.RoutingProfile.prototype.toObject = function(opt_includeInstance) {
  return proto.ns.RoutingProfile.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ns.RoutingProfile} msg The msg instance to transform.
 * @return {!Object}
 */
proto.ns.RoutingProfile.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    asId: msg.getAsId(),
    caCert: msg.getCaCert(),
    tlsCert: msg.getTlsCert(),
    tlsKey: msg.getTlsKey()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ns.RoutingProfile}
 */
proto.ns.RoutingProfile.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ns.RoutingProfile;
  return proto.ns.RoutingProfile.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ns.RoutingProfile} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ns.RoutingProfile}
 */
proto.ns.RoutingProfile.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAsId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCaCert(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsCert(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTlsKey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.ns.RoutingProfile} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.RoutingProfile.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ns.RoutingProfile.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.ns.RoutingProfile.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getAsId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = this.getCaCert();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = this.getTlsCert();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = this.getTlsKey();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.ns.RoutingProfile} The clone.
 */
proto.ns.RoutingProfile.prototype.cloneMessage = function() {
  return /** @type {!proto.ns.RoutingProfile} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.ns.RoutingProfile.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.ns.RoutingProfile.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.ns.RoutingProfile.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.ns.RoutingProfile.prototype.setId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional string as_id = 2;
 * @return {string}
 */
proto.ns.RoutingProfile.prototype.getAsId = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/** @param {string} value  */
proto.ns.RoutingProfile.prototype.setAsId = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional string ca_cert = 3;
 * @return {string}
 */
proto.ns.RoutingProfile.prototype.getCaCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/** @param {string} value  */
proto.ns.RoutingProfile.prototype.setCaCert = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string tls_cert = 4;
 * @return {string}
 */
proto.ns.RoutingProfile.prototype.getTlsCert = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.ns.RoutingProfile.prototype.setTlsCert = function(value) {
  jspb.Message.setField(this, 4, value);
};


/**
 * optional string tls_key = 5;
 * @return {string}
 */
proto.ns.RoutingProfile.prototype.getTlsKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 5, ""));
};


/** @param {string} value  */
proto.ns.RoutingProfile.prototype.setTlsKey = function(value) {
  jspb.Message.setField(this, 5, value);
};


/**
 * @enum {number}
 */
proto.ns.RatePolicy = {
  DROP: 0,
  MARK: 1
};

goog.object.extend(exports, proto.ns);
