/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gw_gw_pb = require('../gw/gw_pb.js');
var common_common_pb = require('../common/common_pb.js');
goog.exportSymbol('proto.geo.FrameRXInfo', null, global);
goog.exportSymbol('proto.geo.ResolveMultiFrameTDOARequest', null, global);
goog.exportSymbol('proto.geo.ResolveMultiFrameTDOAResponse', null, global);
goog.exportSymbol('proto.geo.ResolveResult', null, global);
goog.exportSymbol('proto.geo.ResolveTDOARequest', null, global);
goog.exportSymbol('proto.geo.ResolveTDOAResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.ResolveResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.ResolveResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.ResolveResult.displayName = 'proto.geo.ResolveResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.ResolveResult.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.ResolveResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.ResolveResult} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.ResolveResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    location: (f = msg.getLocation()) && common_common_pb.Location.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.ResolveResult}
 */
proto.geo.ResolveResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.ResolveResult;
  return proto.geo.ResolveResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.ResolveResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.ResolveResult}
 */
proto.geo.ResolveResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new common_common_pb.Location;
      reader.readMessage(value,common_common_pb.Location.deserializeBinaryFromReader);
      msg.setLocation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.ResolveResult} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveResult.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.ResolveResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveResult.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getLocation();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      common_common_pb.Location.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.ResolveResult} The clone.
 */
proto.geo.ResolveResult.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.ResolveResult} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional common.Location location = 1;
 * @return {proto.common.Location}
 */
proto.geo.ResolveResult.prototype.getLocation = function() {
  return /** @type{proto.common.Location} */ (
    jspb.Message.getWrapperField(this, common_common_pb.Location, 1));
};


/** @param {proto.common.Location|undefined} value  */
proto.geo.ResolveResult.prototype.setLocation = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geo.ResolveResult.prototype.clearLocation = function() {
  this.setLocation(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.geo.ResolveResult.prototype.hasLocation = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.FrameRXInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo.FrameRXInfo.repeatedFields_, null);
};
goog.inherits(proto.geo.FrameRXInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.FrameRXInfo.displayName = 'proto.geo.FrameRXInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo.FrameRXInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.FrameRXInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.FrameRXInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.FrameRXInfo} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.FrameRXInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    rxInfoList: jspb.Message.toObjectList(msg.getRxInfoList(),
    gw_gw_pb.UplinkRXInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.FrameRXInfo}
 */
proto.geo.FrameRXInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.FrameRXInfo;
  return proto.geo.FrameRXInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.FrameRXInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.FrameRXInfo}
 */
proto.geo.FrameRXInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gw_gw_pb.UplinkRXInfo;
      reader.readMessage(value,gw_gw_pb.UplinkRXInfo.deserializeBinaryFromReader);
      msg.getRxInfoList().push(value);
      msg.setRxInfoList(msg.getRxInfoList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.FrameRXInfo} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.FrameRXInfo.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.FrameRXInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.FrameRXInfo.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRxInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      gw_gw_pb.UplinkRXInfo.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.FrameRXInfo} The clone.
 */
proto.geo.FrameRXInfo.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.FrameRXInfo} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated gw.UplinkRXInfo rx_info = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.gw.UplinkRXInfo>}
 */
proto.geo.FrameRXInfo.prototype.getRxInfoList = function() {
  return /** @type{!Array.<!proto.gw.UplinkRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, gw_gw_pb.UplinkRXInfo, 1));
};


/** @param {Array.<!proto.gw.UplinkRXInfo>} value  */
proto.geo.FrameRXInfo.prototype.setRxInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.geo.FrameRXInfo.prototype.clearRxInfoList = function() {
  this.setRxInfoList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.ResolveTDOARequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.ResolveTDOARequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.ResolveTDOARequest.displayName = 'proto.geo.ResolveTDOARequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.ResolveTDOARequest.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.ResolveTDOARequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.ResolveTDOARequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.ResolveTDOARequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    frameRxInfo: (f = msg.getFrameRxInfo()) && proto.geo.FrameRXInfo.toObject(includeInstance, f),
    deviceReferenceAltitude: msg.getDeviceReferenceAltitude()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.ResolveTDOARequest}
 */
proto.geo.ResolveTDOARequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.ResolveTDOARequest;
  return proto.geo.ResolveTDOARequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.ResolveTDOARequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.ResolveTDOARequest}
 */
proto.geo.ResolveTDOARequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = new proto.geo.FrameRXInfo;
      reader.readMessage(value,proto.geo.FrameRXInfo.deserializeBinaryFromReader);
      msg.setFrameRxInfo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeviceReferenceAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.ResolveTDOARequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveTDOARequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.ResolveTDOARequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveTDOARequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrameRxInfo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.geo.FrameRXInfo.serializeBinaryToWriter
    );
  }
  f = this.getDeviceReferenceAltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.ResolveTDOARequest} The clone.
 */
proto.geo.ResolveTDOARequest.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.ResolveTDOARequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.geo.ResolveTDOARequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.geo.ResolveTDOARequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.geo.ResolveTDOARequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.geo.ResolveTDOARequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional FrameRXInfo frame_rx_info = 2;
 * @return {proto.geo.FrameRXInfo}
 */
proto.geo.ResolveTDOARequest.prototype.getFrameRxInfo = function() {
  return /** @type{proto.geo.FrameRXInfo} */ (
    jspb.Message.getWrapperField(this, proto.geo.FrameRXInfo, 2));
};


/** @param {proto.geo.FrameRXInfo|undefined} value  */
proto.geo.ResolveTDOARequest.prototype.setFrameRxInfo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.geo.ResolveTDOARequest.prototype.clearFrameRxInfo = function() {
  this.setFrameRxInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.geo.ResolveTDOARequest.prototype.hasFrameRxInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional double device_reference_altitude = 3;
 * @return {number}
 */
proto.geo.ResolveTDOARequest.prototype.getDeviceReferenceAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.geo.ResolveTDOARequest.prototype.setDeviceReferenceAltitude = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.ResolveMultiFrameTDOARequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.geo.ResolveMultiFrameTDOARequest.repeatedFields_, null);
};
goog.inherits(proto.geo.ResolveMultiFrameTDOARequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.ResolveMultiFrameTDOARequest.displayName = 'proto.geo.ResolveMultiFrameTDOARequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.geo.ResolveMultiFrameTDOARequest.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.ResolveMultiFrameTDOARequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.ResolveMultiFrameTDOARequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.ResolveMultiFrameTDOARequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    devEui: msg.getDevEui_asB64(),
    frameRxInfoSetList: jspb.Message.toObjectList(msg.getFrameRxInfoSetList(),
    proto.geo.FrameRXInfo.toObject, includeInstance),
    deviceReferenceAltitude: msg.getDeviceReferenceAltitude()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.ResolveMultiFrameTDOARequest}
 */
proto.geo.ResolveMultiFrameTDOARequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.ResolveMultiFrameTDOARequest;
  return proto.geo.ResolveMultiFrameTDOARequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.ResolveMultiFrameTDOARequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.ResolveMultiFrameTDOARequest}
 */
proto.geo.ResolveMultiFrameTDOARequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDevEui(value);
      break;
    case 2:
      var value = new proto.geo.FrameRXInfo;
      reader.readMessage(value,proto.geo.FrameRXInfo.deserializeBinaryFromReader);
      msg.getFrameRxInfoSetList().push(value);
      msg.setFrameRxInfoSetList(msg.getFrameRxInfoSetList());
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setDeviceReferenceAltitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.ResolveMultiFrameTDOARequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveMultiFrameTDOARequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getDevEui_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getFrameRxInfoSetList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.geo.FrameRXInfo.serializeBinaryToWriter
    );
  }
  f = this.getDeviceReferenceAltitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.ResolveMultiFrameTDOARequest} The clone.
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.ResolveMultiFrameTDOARequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes dev_eui = 1;
 * @return {!(string|Uint8Array)}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.getDevEui = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes dev_eui = 1;
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {string}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.getDevEui_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDevEui()));
};


/**
 * optional bytes dev_eui = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDevEui()`
 * @return {!Uint8Array}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.getDevEui_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDevEui()));
};


/** @param {!(string|Uint8Array)} value  */
proto.geo.ResolveMultiFrameTDOARequest.prototype.setDevEui = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * repeated FrameRXInfo frame_rx_info_set = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.geo.FrameRXInfo>}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.getFrameRxInfoSetList = function() {
  return /** @type{!Array.<!proto.geo.FrameRXInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.geo.FrameRXInfo, 2));
};


/** @param {Array.<!proto.geo.FrameRXInfo>} value  */
proto.geo.ResolveMultiFrameTDOARequest.prototype.setFrameRxInfoSetList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.geo.ResolveMultiFrameTDOARequest.prototype.clearFrameRxInfoSetList = function() {
  this.setFrameRxInfoSetList([]);
};


/**
 * optional double device_reference_altitude = 3;
 * @return {number}
 */
proto.geo.ResolveMultiFrameTDOARequest.prototype.getDeviceReferenceAltitude = function() {
  return /** @type {number} */ (jspb.Message.getFieldProto3(this, 3, 0));
};


/** @param {number} value  */
proto.geo.ResolveMultiFrameTDOARequest.prototype.setDeviceReferenceAltitude = function(value) {
  jspb.Message.setField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.ResolveTDOAResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.ResolveTDOAResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.ResolveTDOAResponse.displayName = 'proto.geo.ResolveTDOAResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.ResolveTDOAResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.ResolveTDOAResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.ResolveTDOAResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.ResolveTDOAResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.geo.ResolveResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.ResolveTDOAResponse}
 */
proto.geo.ResolveTDOAResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.ResolveTDOAResponse;
  return proto.geo.ResolveTDOAResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.ResolveTDOAResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.ResolveTDOAResponse}
 */
proto.geo.ResolveTDOAResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geo.ResolveResult;
      reader.readMessage(value,proto.geo.ResolveResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.ResolveTDOAResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveTDOAResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.ResolveTDOAResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveTDOAResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geo.ResolveResult.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.ResolveTDOAResponse} The clone.
 */
proto.geo.ResolveTDOAResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.ResolveTDOAResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ResolveResult result = 1;
 * @return {proto.geo.ResolveResult}
 */
proto.geo.ResolveTDOAResponse.prototype.getResult = function() {
  return /** @type{proto.geo.ResolveResult} */ (
    jspb.Message.getWrapperField(this, proto.geo.ResolveResult, 1));
};


/** @param {proto.geo.ResolveResult|undefined} value  */
proto.geo.ResolveTDOAResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geo.ResolveTDOAResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.geo.ResolveTDOAResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.geo.ResolveMultiFrameTDOAResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.geo.ResolveMultiFrameTDOAResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.geo.ResolveMultiFrameTDOAResponse.displayName = 'proto.geo.ResolveMultiFrameTDOAResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.geo.ResolveMultiFrameTDOAResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.geo.ResolveMultiFrameTDOAResponse} msg The msg instance to transform.
 * @return {!Object}
 */
proto.geo.ResolveMultiFrameTDOAResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: (f = msg.getResult()) && proto.geo.ResolveResult.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.geo.ResolveMultiFrameTDOAResponse}
 */
proto.geo.ResolveMultiFrameTDOAResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.geo.ResolveMultiFrameTDOAResponse;
  return proto.geo.ResolveMultiFrameTDOAResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.geo.ResolveMultiFrameTDOAResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.geo.ResolveMultiFrameTDOAResponse}
 */
proto.geo.ResolveMultiFrameTDOAResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.geo.ResolveResult;
      reader.readMessage(value,proto.geo.ResolveResult.deserializeBinaryFromReader);
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.geo.ResolveMultiFrameTDOAResponse} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveMultiFrameTDOAResponse.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getResult();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.geo.ResolveResult.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.geo.ResolveMultiFrameTDOAResponse} The clone.
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.cloneMessage = function() {
  return /** @type {!proto.geo.ResolveMultiFrameTDOAResponse} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional ResolveResult result = 1;
 * @return {proto.geo.ResolveResult}
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.getResult = function() {
  return /** @type{proto.geo.ResolveResult} */ (
    jspb.Message.getWrapperField(this, proto.geo.ResolveResult, 1));
};


/** @param {proto.geo.ResolveResult|undefined} value  */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.setResult = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.geo.ResolveMultiFrameTDOAResponse.prototype.clearResult = function() {
  this.setResult(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.geo.ResolveMultiFrameTDOAResponse.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.geo);
