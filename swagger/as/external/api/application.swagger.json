{
  "swagger": "2.0",
  "info": {
    "title": "as/external/api/application.proto",
    "version": "version not set"
  },
  "schemes": [
    "http",
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/api/applications": {
      "get": {
        "summary": "List lists the available applications.",
        "operationId": "List",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListApplicationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "limit",
            "description": "Max number of applications to return in the result-test.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "offset",
            "description": "Offset in the result-set (for pagination).",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "organizationID",
            "description": "ID of the organization to filter on.",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "search",
            "description": "Search on name (optional).",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "post": {
        "summary": "Create creates the given application.",
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiCreateApplicationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateApplicationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application.id}": {
      "put": {
        "summary": "Update updates the given application.",
        "operationId": "Update",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application.id",
            "description": "Application ID.\nThis will be automatically assigned on create.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateApplicationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations": {
      "get": {
        "summary": "ListIntegrations lists all configured integrations.",
        "operationId": "ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiListIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/aws-sns": {
      "get": {
        "summary": "GetAWSSNSIntegration returns the AWS SNS application-integration.",
        "operationId": "GetAWSSNSIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAWSSNSIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteAWSSNSIntegration deletes the AWS SNS application-integration.",
        "operationId": "DeleteAWSSNSIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/azure-service-bus": {
      "get": {
        "summary": "GetAzureServiceBusIntegration returns the Azure Service-Bus application-integration.",
        "operationId": "GetAzureServiceBusIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetAzureServiceBusIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteAzureServiceBusIntegration deletes the Azure Service-Bus application-integration.",
        "operationId": "DeleteAzureServiceBusIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/gcp-pub-sub": {
      "get": {
        "summary": "GetGCPPubSubIntegration returns the GCP PubSub application-integration.",
        "operationId": "GetGCPPubSubIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetGCPPubSubIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteGCPPubSubIntegration deletes the GCP PubSub application-integration.",
        "operationId": "DeleteGCPPubSubIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/http": {
      "get": {
        "summary": "GetHTTPIntegration returns the HTTP application-integration.",
        "operationId": "GetHTTPIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetHTTPIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteIntegration deletes the HTTP application-integration.",
        "operationId": "DeleteHTTPIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/influxdb": {
      "get": {
        "summary": "GetInfluxDBIntegration returns the InfluxDB application-integration.",
        "operationId": "GetInfluxDBIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetInfluxDBIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteInfluxDBIntegration deletes the InfluxDB application-integration.",
        "operationId": "DeleteInfluxDBIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/loracloud": {
      "get": {
        "summary": "GetLoRaCloudIntegration returns the LoRaCloud application-integration.",
        "operationId": "GetLoRaCloudIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetLoRaCloudIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteLoRaCloudIntegration deletes the LoRaCloud application-integration.",
        "operationId": "DeleteLoRaCloudIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/mqtt/certificate": {
      "post": {
        "summary": "GenerateMQTTIntegrationClientCertificate generates an application ID specific TLS certificate\nto connect to the MQTT broker.",
        "operationId": "GenerateMQTTIntegrationClientCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGenerateMQTTIntegrationClientCertificateResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/mydevices": {
      "get": {
        "summary": "GetMyDevicesIntegration returns the MyDevices application-integration.",
        "operationId": "GetMyDevicesIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetMyDevicesIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteMyDevicesIntegration deletes the MyDevices application-integration.",
        "operationId": "DeleteMyDevicesIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/pilot-things": {
      "get": {
        "summary": "GetPilotThingsIntegration returns the Pilot Things application-integration.",
        "operationId": "GetPilotThingsIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetPilotThingsIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeletePilotThingsIntegration deletes the Pilot Things application-integration.",
        "operationId": "DeletePilotThingsIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{application_id}/integrations/thingsboard": {
      "get": {
        "summary": "GetThingsBoardIntegration returns the ThingsBoard application-integration.",
        "operationId": "GetThingsBoardIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetThingsBoardIntegrationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "DeleteThingsBoardIntegration deletes the ThingsBoard application-integration.",
        "operationId": "DeleteThingsBoardIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{id}": {
      "get": {
        "summary": "Get returns the requested application.",
        "operationId": "Get",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/apiGetApplicationResponse"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "delete": {
        "summary": "Delete deletes the given application.",
        "operationId": "Delete",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/aws-sns": {
      "post": {
        "summary": "CreateAWSSNSIntegration creates a AWS SNS application-integration.",
        "operationId": "CreateAWSSNSIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateAWSSNSIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateAWSSNSIntegration updates the AWS SNS application-integration.",
        "operationId": "UpdateAWSSNSIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateAWSSNSIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/azure-service-bus": {
      "post": {
        "summary": "CreateAzureServiceBusIntegration creates an Azure Service-Bus application-integration.",
        "operationId": "CreateAzureServiceBusIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateAzureServiceBusIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateAzureServiceBusIntegration updates the Azure Service-Bus application-integration.",
        "operationId": "UpdateAzureServiceBusIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateAzureServiceBusIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/gcp-pub-sub": {
      "post": {
        "summary": "CreateGCPPubSubIntegration creates a GCP PubSub application-integration.",
        "operationId": "CreateGCPPubSubIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateGCPPubSubIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateGCPPubSubIntegration updates the GCP PubSub application-integration.",
        "operationId": "UpdateGCPPubSubIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateGCPPubSubIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/http": {
      "post": {
        "summary": "CreateHTTPIntegration creates a HTTP application-integration.",
        "operationId": "CreateHTTPIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateHTTPIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateHTTPIntegration updates the HTTP application-integration.",
        "operationId": "UpdateHTTPIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "The id of the application.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateHTTPIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/influxdb": {
      "post": {
        "summary": "CreateInfluxDBIntegration create an InfluxDB application-integration.",
        "operationId": "CreateInfluxDBIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateInfluxDBIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateInfluxDBIntegration updates the InfluxDB application-integration.",
        "operationId": "UpdateInfluxDBIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateInfluxDBIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/loracloud": {
      "post": {
        "summary": "CreateLoRaCloudIntegration creates A LoRaCloud application-integration.",
        "operationId": "CreateLoRaCloudIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateLoRaCloudIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateLoRaCloudIntegration updates the LoRaCloud application-integration.",
        "operationId": "UpdateLoRaCloudIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateLoRaCloudIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/mydevices": {
      "post": {
        "summary": "CreateMyDevicesIntegration creates a MyDevices application-integration.",
        "operationId": "CreateMyDevicesIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateMyDevicesIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateMyDevicesIntegration updates the MyDevices application-integration.",
        "operationId": "UpdateMyDevicesIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateMyDevicesIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/pilot-things": {
      "post": {
        "summary": "CreatePilotThingsIntegration creates an Pilot Things application-integration.",
        "operationId": "CreatePilotThingsIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreatePilotThingsIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdatePilotThingsIntegration updates the Pilot Things application-integration.",
        "operationId": "UpdatePilotThingsIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdatePilotThingsIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    },
    "/api/applications/{integration.application_id}/integrations/thingsboard": {
      "post": {
        "summary": "CreateThingsBoardIntegration creates a ThingsBoard application-integration.",
        "operationId": "CreateThingsBoardIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiCreateThingsBoardIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      },
      "put": {
        "summary": "UpdateThingsBoardIntegration updates the ThingsBoard application-integration.",
        "operationId": "UpdateThingsBoardIntegration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "properties": {}
            }
          }
        },
        "parameters": [
          {
            "name": "integration.application_id",
            "description": "Application ID.",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/apiUpdateThingsBoardIntegrationRequest"
            }
          }
        ],
        "tags": [
          "ApplicationService"
        ]
      }
    }
  },
  "definitions": {
    "apiAWSSNSIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "marshaler": {
          "$ref": "#/definitions/apiMarshaler",
          "description": "Marshaler.\nThis defines the marshaler that is used to encode the event payload."
        },
        "region": {
          "type": "string",
          "description": "AWS region."
        },
        "accessKeyID": {
          "type": "string",
          "description": "AWS Access Key ID."
        },
        "secretAccessKey": {
          "type": "string",
          "description": "AWS Secret Access Key."
        },
        "topicARN": {
          "type": "string",
          "description": "Topic ARN."
        }
      }
    },
    "apiApplication": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Application ID.\nThis will be automatically assigned on create."
        },
        "name": {
          "type": "string",
          "description": "Name of the application (must be unique)."
        },
        "description": {
          "type": "string",
          "description": "Description of the application."
        },
        "organizationID": {
          "type": "string",
          "format": "int64",
          "description": "ID of the organization to which the application belongs.\nAfter create, this can not be modified."
        },
        "serviceProfileID": {
          "type": "string",
          "description": "ID of the service profile."
        },
        "payloadCodec": {
          "type": "string",
          "description": "Payload codec.\nNOTE: These field have moved to the device-profile and will be removed\nin the next major release. When set, the device-profile payload_ fields\nhave priority over the application payload_ fields."
        },
        "payloadEncoderScript": {
          "type": "string",
          "description": "Payload encoder script.\nNOTE: These field have moved to the device-profile and will be removed\nin the next major release. When set, the device-profile payload_ fields\nhave priority over the application payload_ fields."
        },
        "payloadDecoderScript": {
          "type": "string",
          "description": "Payload decoder script.\nNOTE: These field have moved to the device-profile and will be removed\nin the next major release. When set, the device-profile payload_ fields\nhave priority over the application payload_ fields."
        }
      }
    },
    "apiApplicationListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "name": {
          "type": "string",
          "description": "Name of the application."
        },
        "description": {
          "type": "string",
          "description": "Description of the application."
        },
        "organizationID": {
          "type": "string",
          "format": "int64",
          "description": "ID of the organization to which the application belongs."
        },
        "serviceProfileID": {
          "type": "string",
          "description": "ID of the service profile."
        },
        "serviceProfileName": {
          "type": "string",
          "description": "Service-profile name."
        }
      }
    },
    "apiAzureServiceBusIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "marshaler": {
          "$ref": "#/definitions/apiMarshaler",
          "description": "Marshaler.\nThis defines the marshaler that is used to encode the event payload."
        },
        "connectionString": {
          "type": "string",
          "description": "Connection string."
        },
        "publishName": {
          "type": "string",
          "description": "Publish name.\nThis is the name of the topic or queue."
        }
      }
    },
    "apiCreateAWSSNSIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAWSSNSIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateApplicationRequest": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/apiApplication",
          "description": "Application object to create."
        }
      }
    },
    "apiCreateApplicationResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        }
      }
    },
    "apiCreateAzureServiceBusIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAzureServiceBusIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateGCPPubSubIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiGCPPubSubIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateHTTPIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiHTTPIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateInfluxDBIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiInfluxDBIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateLoRaCloudIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiLoRaCloudIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateMyDevicesIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiMyDevicesIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreatePilotThingsIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiPilotThingsIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiCreateThingsBoardIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiThingsBoardIntegration",
          "description": "Integration object to create."
        }
      }
    },
    "apiGCPPubSubIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "marshaler": {
          "$ref": "#/definitions/apiMarshaler",
          "description": "Marshaler.\nThis defines the marshaler that is used to encode the event payload."
        },
        "credentialsFile": {
          "type": "string",
          "title": "Credentials file.\nThis IAM service-account credentials file (JSON) must have the following Pub/Sub roles:\n* Pub/Sub Publisher"
        },
        "projectID": {
          "type": "string",
          "description": "Project ID."
        },
        "topicName": {
          "type": "string",
          "description": "Topic name.\nThis is the name of the Pub/Sub topic."
        }
      }
    },
    "apiGenerateMQTTIntegrationClientCertificateResponse": {
      "type": "object",
      "properties": {
        "tlsCert": {
          "type": "string",
          "description": "TLS certificate."
        },
        "tlsKey": {
          "type": "string",
          "description": "TLS key."
        },
        "caCert": {
          "type": "string",
          "description": "CA certificate."
        },
        "expiresAt": {
          "type": "string",
          "format": "date-time",
          "description": "Expires at defines the expiration date of the certificate."
        }
      }
    },
    "apiGetAWSSNSIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAWSSNSIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetApplicationResponse": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/apiApplication",
          "description": "Application object."
        }
      }
    },
    "apiGetAzureServiceBusIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAzureServiceBusIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetGCPPubSubIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiGCPPubSubIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetHTTPIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiHTTPIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetInfluxDBIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiInfluxDBIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetLoRaCloudIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiLoRaCloudIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetMyDevicesIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiMyDevicesIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetPilotThingsIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiPilotThingsIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiGetThingsBoardIntegrationResponse": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiThingsBoardIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiHTTPIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "The id of the application."
        },
        "headers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiHTTPIntegrationHeader"
          },
          "description": "The headers to use when making HTTP callbacks."
        },
        "uplinkDataURL": {
          "type": "string",
          "description": "The URL to call for uplink data.\nDeprecated: use event_endpoint_url."
        },
        "joinNotificationURL": {
          "type": "string",
          "description": "The URL to call for join notifications.\nDeprecated: use event_endpoint_url."
        },
        "ackNotificationURL": {
          "type": "string",
          "description": "The URL to call for ACK notifications (for confirmed downlink data).\nDeprecated: use event_endpoint_url."
        },
        "errorNotificationURL": {
          "type": "string",
          "description": "The URL to call for error notifications.\nDeprecated: use event_endpoint_url."
        },
        "statusNotificationURL": {
          "type": "string",
          "description": "The URL to call for device-status notifications.\nDeprecated: use event_endpoint_url."
        },
        "locationNotificationURL": {
          "type": "string",
          "description": "The URL to call for location notifications.\nDeprecated: use event_endpoint_url."
        },
        "txAckNotificationURL": {
          "type": "string",
          "description": "The URL to call for tx ack notifications (downlink acknowledged by gateway for transmission).\nDeprecated: use event_endpoint_url."
        },
        "integrationNotificationURL": {
          "type": "string",
          "description": "The URL to call for integration notifications.\nDeprecated: use event_endpoint_url."
        },
        "marshaler": {
          "$ref": "#/definitions/apiMarshaler",
          "description": "Marshaler.\nThis defines the marshaler that is used to encode the event payload."
        },
        "eventEndpointURL": {
          "type": "string",
          "description": "Event endpoint URL.\nThe HTTP integration will POST all events to this enpoint. The request\nwill contain a query parameters \"event\" containing the type of the\nevent."
        }
      }
    },
    "apiHTTPIntegrationHeader": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "Key"
        },
        "value": {
          "type": "string",
          "title": "Value"
        }
      }
    },
    "apiInfluxDBIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "endpoint": {
          "type": "string",
          "description": "InfluxDB API write endpoint (e.g. http://localhost:8086/write)."
        },
        "db": {
          "type": "string",
          "description": "InfluxDB database name."
        },
        "username": {
          "type": "string",
          "description": "InfluxDB username."
        },
        "password": {
          "type": "string",
          "description": "InfluxDB password."
        },
        "retentionPolicyName": {
          "type": "string",
          "description": "InfluxDB retention policy name."
        },
        "precision": {
          "$ref": "#/definitions/apiInfluxDBPrecision",
          "description": "InfluxDB timestamp precision."
        }
      }
    },
    "apiInfluxDBPrecision": {
      "type": "string",
      "enum": [
        "NS",
        "U",
        "MS",
        "S",
        "M",
        "H"
      ],
      "default": "NS"
    },
    "apiIntegrationKind": {
      "type": "string",
      "enum": [
        "HTTP",
        "INFLUXDB",
        "THINGSBOARD",
        "MYDEVICES",
        "LORACLOUD",
        "GCP_PUBSUB",
        "AWS_SNS",
        "AZURE_SERVICE_BUS",
        "PILOT_THINGS",
        "MQTT_GLOBAL"
      ],
      "default": "HTTP"
    },
    "apiIntegrationListItem": {
      "type": "object",
      "properties": {
        "kind": {
          "$ref": "#/definitions/apiIntegrationKind",
          "description": "Integration kind."
        }
      }
    },
    "apiListApplicationResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64",
          "description": "Total number of applications available within the result-set."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiApplicationListItem"
          },
          "description": "Applications within this result-set."
        }
      }
    },
    "apiListIntegrationResponse": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64",
          "description": "Total number of integrations available within the result-set."
        },
        "result": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/apiIntegrationListItem"
          },
          "description": "Integrations within result-set."
        }
      }
    },
    "apiLoRaCloudIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "geolocation": {
          "type": "boolean",
          "format": "boolean",
          "description": "Geolocation enabled."
        },
        "geolocationToken": {
          "type": "string",
          "description": "Geolocation token.\nThis token can be obtained from the LoRa Cloud console."
        },
        "geolocationBufferTTL": {
          "type": "integer",
          "format": "int64",
          "description": "Geolocation buffer TTL (in seconds).\nWhen \u003e 0, uplink RX meta-data will be stored in a buffer so that\nthe meta-data of multiple uplinks can be used for geolocation."
        },
        "geolocationMinBufferSize": {
          "type": "integer",
          "format": "int64",
          "description": "Geolocation minimum buffer size.\nWhen \u003e 0, geolocation will only be performed when the buffer has\nat least the given size."
        },
        "geolocationTDOA": {
          "type": "boolean",
          "format": "boolean",
          "description": "TDOA based geolocation is enabled."
        },
        "geolocationRSSI": {
          "type": "boolean",
          "format": "boolean",
          "description": "RSSI based geolocation is enabled."
        },
        "geolocationGNSS": {
          "type": "boolean",
          "format": "boolean",
          "description": "GNSS based geolocation is enabled (LR1110)."
        },
        "geolocationGNSSPayloadField": {
          "type": "string",
          "description": "GNSS payload field.\nThis holds the name of the field in the decoded payload object which\ncontains the GNSS payload bytes."
        },
        "geolocationGNSSUseRxTime": {
          "type": "boolean",
          "format": "boolean",
          "description": "GNSS use RX time.\nIn case this is set to true, the resolver will use the RX time of the\nnetwork instead of the timestamp included in the LR1110 payload."
        },
        "geolocationWifi": {
          "type": "boolean",
          "format": "boolean",
          "description": "Wifi based geolocation is enabled."
        },
        "geolocationWifiPayloadField": {
          "type": "string",
          "title": "Wifi payload field.\nThis holds the name of the field in the decoded payload object which\ncontains an array of objects with the following fields:\n* macAddress - e.g. 01:23:45:67:89:ab\n* signalStrength - e.g. -51 (optional)"
        },
        "das": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device Application Services enabled."
        },
        "dasToken": {
          "type": "string",
          "description": "Device Application Services token.\nThis token can be obtained from the LoRa Cloud console."
        },
        "dasModemPort": {
          "type": "integer",
          "format": "int64",
          "description": "Device Application Services modem port (FPort).\nChirpStack Application Server will only forward the FRMPayload to DAS\nwhen the uplink FPort is equal to this value."
        },
        "dasGNSSPort": {
          "type": "integer",
          "format": "int64",
          "description": "Device Application Services GNSS port (FPort).\nChirpStack Application Server will forward the FRMPayload to DAS when\nas GNSS payload when the uplink FPort is equal to this value."
        },
        "dasGNSSUseRxTime": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device Application Services GNSS use RX time.\nIn case this is set to true, the DAS resolver will use the RX time of the\nnetwork instead of the timestamp included in the LR1110 payload."
        },
        "dasStreamingGeolocWorkaround": {
          "type": "boolean",
          "format": "boolean",
          "description": "Device Application Services streaming geoloc work-around.\nThis is a temporarily work-around for processing streaming geolocation\ndata. When enabled, stream records (expected in TLV format) are scanned\nfor GNSS data (0x06 or 0x07). If found, the ChirpStack Application Server\nwill make an additional call to the DAS API for resolving the location\nusing the detected payload."
        }
      }
    },
    "apiMarshaler": {
      "type": "string",
      "enum": [
        "JSON",
        "PROTOBUF",
        "JSON_V3"
      ],
      "default": "JSON"
    },
    "apiMyDevicesIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "endpoint": {
          "type": "string",
          "description": "MyDevices API endpoint."
        }
      }
    },
    "apiPilotThingsIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "server": {
          "type": "string",
          "title": "Server URL"
        },
        "token": {
          "type": "string",
          "title": "Authentication token"
        }
      }
    },
    "apiThingsBoardIntegration": {
      "type": "object",
      "properties": {
        "applicationID": {
          "type": "string",
          "format": "int64",
          "description": "Application ID."
        },
        "server": {
          "type": "string",
          "title": "ThingsBoard server endpoint, e.g. https://example.com"
        }
      }
    },
    "apiUpdateAWSSNSIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAWSSNSIntegration",
          "description": "Integration object to update."
        }
      }
    },
    "apiUpdateApplicationRequest": {
      "type": "object",
      "properties": {
        "application": {
          "$ref": "#/definitions/apiApplication",
          "description": "Application object to update."
        }
      }
    },
    "apiUpdateAzureServiceBusIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiAzureServiceBusIntegration",
          "description": "Integration object to update."
        }
      }
    },
    "apiUpdateGCPPubSubIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiGCPPubSubIntegration",
          "description": "Integration object to update."
        }
      }
    },
    "apiUpdateHTTPIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiHTTPIntegration",
          "description": "Integration object to update."
        }
      }
    },
    "apiUpdateInfluxDBIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiInfluxDBIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiUpdateLoRaCloudIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiLoRaCloudIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiUpdateMyDevicesIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiMyDevicesIntegration",
          "description": "Integration object."
        }
      }
    },
    "apiUpdatePilotThingsIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiPilotThingsIntegration",
          "description": "Integration object to update."
        }
      }
    },
    "apiUpdateThingsBoardIntegrationRequest": {
      "type": "object",
      "properties": {
        "integration": {
          "$ref": "#/definitions/apiThingsBoardIntegration",
          "description": "Integration object."
        }
      }
    }
  }
}
