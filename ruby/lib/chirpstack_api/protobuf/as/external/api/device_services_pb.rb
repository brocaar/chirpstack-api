# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: as/external/api/device.proto for package 'ChirpStackAPI.AS.External.API'

require 'grpc'
require 'as/external/api/device_pb'

module ChirpStackAPI
  module AS
    module External
      module API
        module DeviceService
          # DeviceService is the service managing the devices.
          class Service

            include GRPC::GenericService

            self.marshal_class_method = :encode
            self.unmarshal_class_method = :decode
            self.service_name = 'api.DeviceService'

            # Create creates the given device.
            rpc :Create, ::ChirpStackAPI::AS::External::API::CreateDeviceRequest, ::Google::Protobuf::Empty
            # Get returns the device matching the given DevEUI.
            rpc :Get, ::ChirpStackAPI::AS::External::API::GetDeviceRequest, ::ChirpStackAPI::AS::External::API::GetDeviceResponse
            # List returns the available devices.
            rpc :List, ::ChirpStackAPI::AS::External::API::ListDeviceRequest, ::ChirpStackAPI::AS::External::API::ListDeviceResponse
            # Delete deletes the device matching the given DevEUI.
            rpc :Delete, ::ChirpStackAPI::AS::External::API::DeleteDeviceRequest, ::Google::Protobuf::Empty
            # Update updates the device matching the given DevEUI.
            rpc :Update, ::ChirpStackAPI::AS::External::API::UpdateDeviceRequest, ::Google::Protobuf::Empty
            # CreateKeys creates the given device-keys.
            rpc :CreateKeys, ::ChirpStackAPI::AS::External::API::CreateDeviceKeysRequest, ::Google::Protobuf::Empty
            # GetKeys returns the device-keys for the given DevEUI.
            rpc :GetKeys, ::ChirpStackAPI::AS::External::API::GetDeviceKeysRequest, ::ChirpStackAPI::AS::External::API::GetDeviceKeysResponse
            # UpdateKeys updates the device-keys.
            rpc :UpdateKeys, ::ChirpStackAPI::AS::External::API::UpdateDeviceKeysRequest, ::Google::Protobuf::Empty
            # DeleteKeys deletes the device-keys for the given DevEUI.
            rpc :DeleteKeys, ::ChirpStackAPI::AS::External::API::DeleteDeviceKeysRequest, ::Google::Protobuf::Empty
            # Activate (re)activates the device with the given parameters (for ABP or for importing OTAA activations).
            rpc :Activate, ::ChirpStackAPI::AS::External::API::ActivateDeviceRequest, ::Google::Protobuf::Empty
            # Deactivate de-activates the device.
            rpc :Deactivate, ::ChirpStackAPI::AS::External::API::DeactivateDeviceRequest, ::Google::Protobuf::Empty
            # GetActivation returns the current activation details of the device (OTAA and ABP).
            rpc :GetActivation, ::ChirpStackAPI::AS::External::API::GetDeviceActivationRequest, ::ChirpStackAPI::AS::External::API::GetDeviceActivationResponse
            # GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
            rpc :GetRandomDevAddr, ::ChirpStackAPI::AS::External::API::GetRandomDevAddrRequest, ::ChirpStackAPI::AS::External::API::GetRandomDevAddrResponse
            # StreamFrameLogs streams the uplink and downlink frame-logs for the given DevEUI.
            #   * These are the raw LoRaWAN frames and this endpoint is intended for debugging only.
            #   * This endpoint does not work from a web-browser.
            rpc :StreamFrameLogs, ::ChirpStackAPI::AS::External::API::StreamDeviceFrameLogsRequest, stream(::ChirpStackAPI::AS::External::API::StreamDeviceFrameLogsResponse)
            # StreamEventLogs stream the device events (uplink payloads, ACKs, joins, errors).
            #   * This endpoint is intended for debugging only.
            #   * This endpoint does not work from a web-browser.
            rpc :StreamEventLogs, ::ChirpStackAPI::AS::External::API::StreamDeviceEventLogsRequest, stream(::ChirpStackAPI::AS::External::API::StreamDeviceEventLogsResponse)
          end

          Stub = Service.rpc_stub_class
        end
      end
    end
  end
end
