# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: nc/nc.proto for package 'ChirpStackAPI.NC'

require 'grpc'
require 'nc/nc_pb'

module ChirpStackAPI
  module NC
    module NetworkControllerService
      # NetworkControllerService is the server to be implemeted by the network-controller.
      class Service

        include GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'nc.NetworkControllerService'

        # HandleUplinkMetaData handles uplink meta-rata.
        rpc :HandleUplinkMetaData, ::ChirpStackAPI::NC::HandleUplinkMetaDataRequest, ::Google::Protobuf::Empty
        # HandleDownlinkMetaData handles downlink meta-data.
        rpc :HandleDownlinkMetaData, ::ChirpStackAPI::NC::HandleDownlinkMetaDataRequest, ::Google::Protobuf::Empty
        # HandleUplinkMACCommand handles an uplink mac-command.
        # This method will only be called in case the mac-command request was
        # enqueued throught the API or when the CID is >= 0x80 (proprietary
        # mac-command range).
        rpc :HandleUplinkMACCommand, ::ChirpStackAPI::NC::HandleUplinkMACCommandRequest, ::Google::Protobuf::Empty
        # HandleRejectedUplinkFrameSet handles a rejected uplink.
        # And uplink can be rejected in the case the device has not (yet) been
        # provisioned, because of invalid frame-counter, MIC, ...
        rpc :HandleRejectedUplinkFrameSet, ::ChirpStackAPI::NC::HandleRejectedUplinkFrameSetRequest, ::Google::Protobuf::Empty
      end

      Stub = Service.rpc_stub_class
    end
  end
end
