# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: ns/ns.proto for package 'ChirpStackAPI.NS'

require 'grpc'
require 'ns/ns_pb'

module ChirpStackAPI
  module NS
    module NetworkServerService
      # NetworkServerService provides the network-server API methods.
      class Service

        include GRPC::GenericService

        self.marshal_class_method = :encode
        self.unmarshal_class_method = :decode
        self.service_name = 'ns.NetworkServerService'

        # CreateServiceProfile creates the given service-profile.
        rpc :CreateServiceProfile, ::ChirpStackAPI::NS::CreateServiceProfileRequest, ::ChirpStackAPI::NS::CreateServiceProfileResponse
        # GetServiceProfile returns the service-profile matching the given id.
        rpc :GetServiceProfile, ::ChirpStackAPI::NS::GetServiceProfileRequest, ::ChirpStackAPI::NS::GetServiceProfileResponse
        # UpdateServiceProfile updates the given service-profile.
        rpc :UpdateServiceProfile, ::ChirpStackAPI::NS::UpdateServiceProfileRequest, ::Google::Protobuf::Empty
        # DeleteServiceProfile deletes the service-profile matching the given id.
        rpc :DeleteServiceProfile, ::ChirpStackAPI::NS::DeleteServiceProfileRequest, ::Google::Protobuf::Empty
        # CreateRoutingProfile creates the given routing-profile.
        rpc :CreateRoutingProfile, ::ChirpStackAPI::NS::CreateRoutingProfileRequest, ::ChirpStackAPI::NS::CreateRoutingProfileResponse
        # GetRoutingProfile returns the routing-profile matching the given id.
        rpc :GetRoutingProfile, ::ChirpStackAPI::NS::GetRoutingProfileRequest, ::ChirpStackAPI::NS::GetRoutingProfileResponse
        # UpdateRoutingProfile updates the given routing-profile.
        rpc :UpdateRoutingProfile, ::ChirpStackAPI::NS::UpdateRoutingProfileRequest, ::Google::Protobuf::Empty
        # DeleteRoutingProfile deletes the routing-profile matching the given id.
        rpc :DeleteRoutingProfile, ::ChirpStackAPI::NS::DeleteRoutingProfileRequest, ::Google::Protobuf::Empty
        # CreateDeviceProfile creates the given device-profile.
        rpc :CreateDeviceProfile, ::ChirpStackAPI::NS::CreateDeviceProfileRequest, ::ChirpStackAPI::NS::CreateDeviceProfileResponse
        # GetDeviceProfile returns the device-profile matching the given id.
        rpc :GetDeviceProfile, ::ChirpStackAPI::NS::GetDeviceProfileRequest, ::ChirpStackAPI::NS::GetDeviceProfileResponse
        # UpdateDeviceProfile updates the given device-profile.
        rpc :UpdateDeviceProfile, ::ChirpStackAPI::NS::UpdateDeviceProfileRequest, ::Google::Protobuf::Empty
        # DeleteDeviceProfile deletes the device-profile matching the given id.
        rpc :DeleteDeviceProfile, ::ChirpStackAPI::NS::DeleteDeviceProfileRequest, ::Google::Protobuf::Empty
        # CreateDevice creates the given device.
        rpc :CreateDevice, ::ChirpStackAPI::NS::CreateDeviceRequest, ::Google::Protobuf::Empty
        # GetDevice returns the device matching the given DevEUI.
        rpc :GetDevice, ::ChirpStackAPI::NS::GetDeviceRequest, ::ChirpStackAPI::NS::GetDeviceResponse
        # UpdateDevice updates the given device.
        rpc :UpdateDevice, ::ChirpStackAPI::NS::UpdateDeviceRequest, ::Google::Protobuf::Empty
        # DeleteDevice deletes the device matching the given DevEUI.
        rpc :DeleteDevice, ::ChirpStackAPI::NS::DeleteDeviceRequest, ::Google::Protobuf::Empty
        # ActivateDevice activates a device (ABP).
        rpc :ActivateDevice, ::ChirpStackAPI::NS::ActivateDeviceRequest, ::Google::Protobuf::Empty
        # DeactivateDevice de-activates a device.
        rpc :DeactivateDevice, ::ChirpStackAPI::NS::DeactivateDeviceRequest, ::Google::Protobuf::Empty
        # GetDeviceActivation returns the device activation details.
        rpc :GetDeviceActivation, ::ChirpStackAPI::NS::GetDeviceActivationRequest, ::ChirpStackAPI::NS::GetDeviceActivationResponse
        # CreateDeviceQueueItem creates the given device-queue item.
        rpc :CreateDeviceQueueItem, ::ChirpStackAPI::NS::CreateDeviceQueueItemRequest, ::Google::Protobuf::Empty
        # FlushDeviceQueueForDevEUI flushes the device-queue for the given DevEUI.
        rpc :FlushDeviceQueueForDevEUI, ::ChirpStackAPI::NS::FlushDeviceQueueForDevEUIRequest, ::Google::Protobuf::Empty
        # GetDeviceQueueItemsForDevEUI returns all device-queue items for the given DevEUI.
        rpc :GetDeviceQueueItemsForDevEUI, ::ChirpStackAPI::NS::GetDeviceQueueItemsForDevEUIRequest, ::ChirpStackAPI::NS::GetDeviceQueueItemsForDevEUIResponse
        # GetNextDownlinkFCntForDevEUI returns the next FCnt that must be used.
        # This also takes device-queue items for the given DevEUI into consideration.
        rpc :GetNextDownlinkFCntForDevEUI, ::ChirpStackAPI::NS::GetNextDownlinkFCntForDevEUIRequest, ::ChirpStackAPI::NS::GetNextDownlinkFCntForDevEUIResponse
        # GetRandomDevAddr returns a random DevAddr taking the NwkID prefix into account.
        rpc :GetRandomDevAddr, ::Google::Protobuf::Empty, ::ChirpStackAPI::NS::GetRandomDevAddrResponse
        # CreateMACCommandQueueItem adds the downlink mac-command to the queue.
        rpc :CreateMACCommandQueueItem, ::ChirpStackAPI::NS::CreateMACCommandQueueItemRequest, ::Google::Protobuf::Empty
        # SendProprietaryPayload send a payload using the 'Proprietary' LoRaWAN message-type.
        rpc :SendProprietaryPayload, ::ChirpStackAPI::NS::SendProprietaryPayloadRequest, ::Google::Protobuf::Empty
        # CreateGateway creates the given gateway.
        rpc :CreateGateway, ::ChirpStackAPI::NS::CreateGatewayRequest, ::Google::Protobuf::Empty
        # GetGateway returns data for a particular gateway.
        rpc :GetGateway, ::ChirpStackAPI::NS::GetGatewayRequest, ::ChirpStackAPI::NS::GetGatewayResponse
        # UpdateGateway updates an existing gateway.
        rpc :UpdateGateway, ::ChirpStackAPI::NS::UpdateGatewayRequest, ::Google::Protobuf::Empty
        # DeleteGateway deletes a gateway.
        rpc :DeleteGateway, ::ChirpStackAPI::NS::DeleteGatewayRequest, ::Google::Protobuf::Empty
        # GenerateGatewayClientCertificate returns TLS certificate gateway authentication / authorization.
        # This endpoint can ony be used when ChirpStack Network Server is configured with a gateway
        # CA certificate and key, which is used for signing the TLS certificate. The returned TLS
        # certificate will have the Gateway ID as Common Name.
        rpc :GenerateGatewayClientCertificate, ::ChirpStackAPI::NS::GenerateGatewayClientCertificateRequest, ::ChirpStackAPI::NS::GenerateGatewayClientCertificateResponse
        # CreateGatewayProfile creates the given gateway-profile.
        rpc :CreateGatewayProfile, ::ChirpStackAPI::NS::CreateGatewayProfileRequest, ::ChirpStackAPI::NS::CreateGatewayProfileResponse
        # GetGatewayProfile returns the gateway-profile given an id.
        rpc :GetGatewayProfile, ::ChirpStackAPI::NS::GetGatewayProfileRequest, ::ChirpStackAPI::NS::GetGatewayProfileResponse
        # UpdateGatewayProfile updates the given gateway-profile.
        rpc :UpdateGatewayProfile, ::ChirpStackAPI::NS::UpdateGatewayProfileRequest, ::Google::Protobuf::Empty
        # DeleteGatewayProfile deletes the gateway-profile matching a given id.
        rpc :DeleteGatewayProfile, ::ChirpStackAPI::NS::DeleteGatewayProfileRequest, ::Google::Protobuf::Empty
        # GetGatewayStats returns stats of an existing gateway.
        # Deprecated (stats are forwarded to Application Server API).
        rpc :GetGatewayStats, ::ChirpStackAPI::NS::GetGatewayStatsRequest, ::ChirpStackAPI::NS::GetGatewayStatsResponse
        # StreamFrameLogsForGateway returns a stream of frames seen by the given gateway.
        rpc :StreamFrameLogsForGateway, ::ChirpStackAPI::NS::StreamFrameLogsForGatewayRequest, stream(::ChirpStackAPI::NS::StreamFrameLogsForGatewayResponse)
        # StreamFrameLogsForDevice returns a stream of frames seen by the given device.
        rpc :StreamFrameLogsForDevice, ::ChirpStackAPI::NS::StreamFrameLogsForDeviceRequest, stream(::ChirpStackAPI::NS::StreamFrameLogsForDeviceResponse)
        # CreateMulticastGroup creates the given multicast-group.
        rpc :CreateMulticastGroup, ::ChirpStackAPI::NS::CreateMulticastGroupRequest, ::ChirpStackAPI::NS::CreateMulticastGroupResponse
        # GetMulticastGroup returns the multicast-group given an id.
        rpc :GetMulticastGroup, ::ChirpStackAPI::NS::GetMulticastGroupRequest, ::ChirpStackAPI::NS::GetMulticastGroupResponse
        # UpdateMulticastGroup updates the given multicast-group.
        rpc :UpdateMulticastGroup, ::ChirpStackAPI::NS::UpdateMulticastGroupRequest, ::Google::Protobuf::Empty
        # DeleteMulticastGroup deletes a multicast-group given an id.
        rpc :DeleteMulticastGroup, ::ChirpStackAPI::NS::DeleteMulticastGroupRequest, ::Google::Protobuf::Empty
        # AddDeviceToMulticastGroup adds the given device to the given multicast-group.
        rpc :AddDeviceToMulticastGroup, ::ChirpStackAPI::NS::AddDeviceToMulticastGroupRequest, ::Google::Protobuf::Empty
        # RemoveDeviceFromMulticastGroup removes the given device from the given multicast-group.
        rpc :RemoveDeviceFromMulticastGroup, ::ChirpStackAPI::NS::RemoveDeviceFromMulticastGroupRequest, ::Google::Protobuf::Empty
        # EnqueueMulticastQueueItem enqueues the given multicast queue-item and
        # increments the frame-counter after enqueueing.
        rpc :EnqueueMulticastQueueItem, ::ChirpStackAPI::NS::EnqueueMulticastQueueItemRequest, ::Google::Protobuf::Empty
        # FlushMulticastQueueForMulticastGroup flushes the multicast device-queue given a multicast-group id.
        rpc :FlushMulticastQueueForMulticastGroup, ::ChirpStackAPI::NS::FlushMulticastQueueForMulticastGroupRequest, ::Google::Protobuf::Empty
        # GetMulticastQueueItemsForMulticastGroup returns the queue-items given a multicast-group id.
        rpc :GetMulticastQueueItemsForMulticastGroup, ::ChirpStackAPI::NS::GetMulticastQueueItemsForMulticastGroupRequest, ::ChirpStackAPI::NS::GetMulticastQueueItemsForMulticastGroupResponse
        # GetVersion returns the ChirpStack Network Server version.
        rpc :GetVersion, ::Google::Protobuf::Empty, ::ChirpStackAPI::NS::GetVersionResponse
      end

      Stub = Service.rpc_stub_class
    end
  end
end
