// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: as/as.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Chirpstack.ApplicationServer {
  /// <summary>
  /// ApplicationServerService is the service providing the application-server interface.
  /// </summary>
  public static partial class ApplicationServerService
  {
    static readonly string __ServiceName = "as.ApplicationServerService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleUplinkDataRequest> __Marshaller_as_HandleUplinkDataRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleUplinkDataRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest> __Marshaller_as_HandleProprietaryUplinkRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleErrorRequest> __Marshaller_as_HandleErrorRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleErrorRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest> __Marshaller_as_HandleDownlinkACKRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest> __Marshaller_as_HandleGatewayStatsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.HandleTxAckRequest> __Marshaller_as_HandleTxAckRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.HandleTxAckRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.SetDeviceStatusRequest> __Marshaller_as_SetDeviceStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.SetDeviceStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.SetDeviceLocationRequest> __Marshaller_as_SetDeviceLocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.SetDeviceLocationRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest> __Marshaller_as_ReEncryptDeviceQueueItemsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse> __Marshaller_as_ReEncryptDeviceQueueItemsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleUplinkDataRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleUplinkData = new grpc::Method<global::Chirpstack.ApplicationServer.HandleUplinkDataRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleUplinkData",
        __Marshaller_as_HandleUplinkDataRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleProprietaryUplink = new grpc::Method<global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleProprietaryUplink",
        __Marshaller_as_HandleProprietaryUplinkRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleError = new grpc::Method<global::Chirpstack.ApplicationServer.HandleErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleError",
        __Marshaller_as_HandleErrorRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleDownlinkACK = new grpc::Method<global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleDownlinkACK",
        __Marshaller_as_HandleDownlinkACKRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleGatewayStats = new grpc::Method<global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleGatewayStats",
        __Marshaller_as_HandleGatewayStatsRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.HandleTxAckRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_HandleTxAck = new grpc::Method<global::Chirpstack.ApplicationServer.HandleTxAckRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "HandleTxAck",
        __Marshaller_as_HandleTxAckRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.SetDeviceStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetDeviceStatus = new grpc::Method<global::Chirpstack.ApplicationServer.SetDeviceStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDeviceStatus",
        __Marshaller_as_SetDeviceStatusRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.SetDeviceLocationRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_SetDeviceLocation = new grpc::Method<global::Chirpstack.ApplicationServer.SetDeviceLocationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "SetDeviceLocation",
        __Marshaller_as_SetDeviceLocationRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest, global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse> __Method_ReEncryptDeviceQueueItems = new grpc::Method<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest, global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ReEncryptDeviceQueueItems",
        __Marshaller_as_ReEncryptDeviceQueueItemsRequest,
        __Marshaller_as_ReEncryptDeviceQueueItemsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Chirpstack.ApplicationServer.AsReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of ApplicationServerService</summary>
    [grpc::BindServiceMethod(typeof(ApplicationServerService), "BindService")]
    public abstract partial class ApplicationServerServiceBase
    {
      /// <summary>
      /// HandleUplinkData handles uplink data received from an end-device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleUplinkData(global::Chirpstack.ApplicationServer.HandleUplinkDataRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HandleProprietaryUplink handles proprietary uplink payloads.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleProprietaryUplink(global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HandleError handles an error message.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleError(global::Chirpstack.ApplicationServer.HandleErrorRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HandleDownlinkACK handles a downlink ACK or nACK response.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleDownlinkACK(global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HandleGatewayStats handles the given gateway stats.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleGatewayStats(global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// HandleTXACK handles the TX acknowledgement.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> HandleTxAck(global::Chirpstack.ApplicationServer.HandleTxAckRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetDeviceStatus updates the device-status for a device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceStatus(global::Chirpstack.ApplicationServer.SetDeviceStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// SetDeviceLocation updates the device-location for a device.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceLocation(global::Chirpstack.ApplicationServer.SetDeviceLocationRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
      /// the given payload items using the new parameters. This request is
      /// for example triggered when the associated frame-counter of a downlink
      /// payload will be used by a mac-layer only payload, e.g. when the NS has
      /// mac-commands (or ACKs) to send to the device and combining this with
      /// an application-layer payload would exceed the max. payload size.
      /// Note there is no requirement that the number of returned items must be
      /// equal to the number of requested items.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse> ReEncryptDeviceQueueItems(global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ApplicationServerService</summary>
    public partial class ApplicationServerServiceClient : grpc::ClientBase<ApplicationServerServiceClient>
    {
      /// <summary>Creates a new client for ApplicationServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ApplicationServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ApplicationServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public ApplicationServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ApplicationServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected ApplicationServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// HandleUplinkData handles uplink data received from an end-device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleUplinkData(global::Chirpstack.ApplicationServer.HandleUplinkDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleUplinkData(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleUplinkData handles uplink data received from an end-device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleUplinkData(global::Chirpstack.ApplicationServer.HandleUplinkDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleUplinkData, null, options, request);
      }
      /// <summary>
      /// HandleUplinkData handles uplink data received from an end-device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleUplinkDataAsync(global::Chirpstack.ApplicationServer.HandleUplinkDataRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleUplinkDataAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleUplinkData handles uplink data received from an end-device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleUplinkDataAsync(global::Chirpstack.ApplicationServer.HandleUplinkDataRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleUplinkData, null, options, request);
      }
      /// <summary>
      /// HandleProprietaryUplink handles proprietary uplink payloads.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleProprietaryUplink(global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleProprietaryUplink(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleProprietaryUplink handles proprietary uplink payloads.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleProprietaryUplink(global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleProprietaryUplink, null, options, request);
      }
      /// <summary>
      /// HandleProprietaryUplink handles proprietary uplink payloads.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleProprietaryUplinkAsync(global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleProprietaryUplinkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleProprietaryUplink handles proprietary uplink payloads.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleProprietaryUplinkAsync(global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleProprietaryUplink, null, options, request);
      }
      /// <summary>
      /// HandleError handles an error message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleError(global::Chirpstack.ApplicationServer.HandleErrorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleError(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleError handles an error message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleError(global::Chirpstack.ApplicationServer.HandleErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleError, null, options, request);
      }
      /// <summary>
      /// HandleError handles an error message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleErrorAsync(global::Chirpstack.ApplicationServer.HandleErrorRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleErrorAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleError handles an error message.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleErrorAsync(global::Chirpstack.ApplicationServer.HandleErrorRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleError, null, options, request);
      }
      /// <summary>
      /// HandleDownlinkACK handles a downlink ACK or nACK response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleDownlinkACK(global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleDownlinkACK(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleDownlinkACK handles a downlink ACK or nACK response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleDownlinkACK(global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleDownlinkACK, null, options, request);
      }
      /// <summary>
      /// HandleDownlinkACK handles a downlink ACK or nACK response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleDownlinkACKAsync(global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleDownlinkACKAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleDownlinkACK handles a downlink ACK or nACK response.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleDownlinkACKAsync(global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleDownlinkACK, null, options, request);
      }
      /// <summary>
      /// HandleGatewayStats handles the given gateway stats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleGatewayStats(global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleGatewayStats(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleGatewayStats handles the given gateway stats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleGatewayStats(global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleGatewayStats, null, options, request);
      }
      /// <summary>
      /// HandleGatewayStats handles the given gateway stats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleGatewayStatsAsync(global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleGatewayStatsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleGatewayStats handles the given gateway stats.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleGatewayStatsAsync(global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleGatewayStats, null, options, request);
      }
      /// <summary>
      /// HandleTXACK handles the TX acknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleTxAck(global::Chirpstack.ApplicationServer.HandleTxAckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleTxAck(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleTXACK handles the TX acknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty HandleTxAck(global::Chirpstack.ApplicationServer.HandleTxAckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_HandleTxAck, null, options, request);
      }
      /// <summary>
      /// HandleTXACK handles the TX acknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleTxAckAsync(global::Chirpstack.ApplicationServer.HandleTxAckRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return HandleTxAckAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// HandleTXACK handles the TX acknowledgement.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> HandleTxAckAsync(global::Chirpstack.ApplicationServer.HandleTxAckRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_HandleTxAck, null, options, request);
      }
      /// <summary>
      /// SetDeviceStatus updates the device-status for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetDeviceStatus(global::Chirpstack.ApplicationServer.SetDeviceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeviceStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetDeviceStatus updates the device-status for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetDeviceStatus(global::Chirpstack.ApplicationServer.SetDeviceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDeviceStatus, null, options, request);
      }
      /// <summary>
      /// SetDeviceStatus updates the device-status for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceStatusAsync(global::Chirpstack.ApplicationServer.SetDeviceStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeviceStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetDeviceStatus updates the device-status for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceStatusAsync(global::Chirpstack.ApplicationServer.SetDeviceStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDeviceStatus, null, options, request);
      }
      /// <summary>
      /// SetDeviceLocation updates the device-location for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetDeviceLocation(global::Chirpstack.ApplicationServer.SetDeviceLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeviceLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetDeviceLocation updates the device-location for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty SetDeviceLocation(global::Chirpstack.ApplicationServer.SetDeviceLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_SetDeviceLocation, null, options, request);
      }
      /// <summary>
      /// SetDeviceLocation updates the device-location for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceLocationAsync(global::Chirpstack.ApplicationServer.SetDeviceLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return SetDeviceLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// SetDeviceLocation updates the device-location for a device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> SetDeviceLocationAsync(global::Chirpstack.ApplicationServer.SetDeviceLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_SetDeviceLocation, null, options, request);
      }
      /// <summary>
      /// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
      /// the given payload items using the new parameters. This request is
      /// for example triggered when the associated frame-counter of a downlink
      /// payload will be used by a mac-layer only payload, e.g. when the NS has
      /// mac-commands (or ACKs) to send to the device and combining this with
      /// an application-layer payload would exceed the max. payload size.
      /// Note there is no requirement that the number of returned items must be
      /// equal to the number of requested items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse ReEncryptDeviceQueueItems(global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReEncryptDeviceQueueItems(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
      /// the given payload items using the new parameters. This request is
      /// for example triggered when the associated frame-counter of a downlink
      /// payload will be used by a mac-layer only payload, e.g. when the NS has
      /// mac-commands (or ACKs) to send to the device and combining this with
      /// an application-layer payload would exceed the max. payload size.
      /// Note there is no requirement that the number of returned items must be
      /// equal to the number of requested items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse ReEncryptDeviceQueueItems(global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ReEncryptDeviceQueueItems, null, options, request);
      }
      /// <summary>
      /// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
      /// the given payload items using the new parameters. This request is
      /// for example triggered when the associated frame-counter of a downlink
      /// payload will be used by a mac-layer only payload, e.g. when the NS has
      /// mac-commands (or ACKs) to send to the device and combining this with
      /// an application-layer payload would exceed the max. payload size.
      /// Note there is no requirement that the number of returned items must be
      /// equal to the number of requested items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse> ReEncryptDeviceQueueItemsAsync(global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ReEncryptDeviceQueueItemsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ReEncryptDeviceQueueItems requests the application-server to re-encrypt
      /// the given payload items using the new parameters. This request is
      /// for example triggered when the associated frame-counter of a downlink
      /// payload will be used by a mac-layer only payload, e.g. when the NS has
      /// mac-commands (or ACKs) to send to the device and combining this with
      /// an application-layer payload would exceed the max. payload size.
      /// Note there is no requirement that the number of returned items must be
      /// equal to the number of requested items.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse> ReEncryptDeviceQueueItemsAsync(global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ReEncryptDeviceQueueItems, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override ApplicationServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ApplicationServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(ApplicationServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_HandleUplinkData, serviceImpl.HandleUplinkData)
          .AddMethod(__Method_HandleProprietaryUplink, serviceImpl.HandleProprietaryUplink)
          .AddMethod(__Method_HandleError, serviceImpl.HandleError)
          .AddMethod(__Method_HandleDownlinkACK, serviceImpl.HandleDownlinkACK)
          .AddMethod(__Method_HandleGatewayStats, serviceImpl.HandleGatewayStats)
          .AddMethod(__Method_HandleTxAck, serviceImpl.HandleTxAck)
          .AddMethod(__Method_SetDeviceStatus, serviceImpl.SetDeviceStatus)
          .AddMethod(__Method_SetDeviceLocation, serviceImpl.SetDeviceLocation)
          .AddMethod(__Method_ReEncryptDeviceQueueItems, serviceImpl.ReEncryptDeviceQueueItems).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, ApplicationServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_HandleUplinkData, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleUplinkDataRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleUplinkData));
      serviceBinder.AddMethod(__Method_HandleProprietaryUplink, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleProprietaryUplinkRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleProprietaryUplink));
      serviceBinder.AddMethod(__Method_HandleError, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleErrorRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleError));
      serviceBinder.AddMethod(__Method_HandleDownlinkACK, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleDownlinkACKRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleDownlinkACK));
      serviceBinder.AddMethod(__Method_HandleGatewayStats, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleGatewayStatsRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleGatewayStats));
      serviceBinder.AddMethod(__Method_HandleTxAck, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.HandleTxAckRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.HandleTxAck));
      serviceBinder.AddMethod(__Method_SetDeviceStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.SetDeviceStatusRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetDeviceStatus));
      serviceBinder.AddMethod(__Method_SetDeviceLocation, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.SetDeviceLocationRequest, global::Google.Protobuf.WellKnownTypes.Empty>(serviceImpl.SetDeviceLocation));
      serviceBinder.AddMethod(__Method_ReEncryptDeviceQueueItems, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsRequest, global::Chirpstack.ApplicationServer.ReEncryptDeviceQueueItemsResponse>(serviceImpl.ReEncryptDeviceQueueItems));
    }

  }
}
#endregion
