// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: fuota/fuota.proto
// </auto-generated>
#pragma warning disable 0414, 1591, 8981
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Chirpstack.Fuota {
  /// <summary>
  /// FUOTAServerService provides the fuota-server API methods.
  /// Note: this API considered experimental.
  /// </summary>
  public static partial class FUOTAServerService
  {
    static readonly string __ServiceName = "fuota.FUOTAServerService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.CreateDeploymentRequest> __Marshaller_fuota_CreateDeploymentRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.CreateDeploymentRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.CreateDeploymentResponse> __Marshaller_fuota_CreateDeploymentResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.CreateDeploymentResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.GetDeploymentStatusRequest> __Marshaller_fuota_GetDeploymentStatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.GetDeploymentStatusRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.GetDeploymentStatusResponse> __Marshaller_fuota_GetDeploymentStatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.GetDeploymentStatusResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest> __Marshaller_fuota_GetDeploymentDeviceLogsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse> __Marshaller_fuota_GetDeploymentDeviceLogsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.Fuota.CreateDeploymentRequest, global::Chirpstack.Fuota.CreateDeploymentResponse> __Method_CreateDeployment = new grpc::Method<global::Chirpstack.Fuota.CreateDeploymentRequest, global::Chirpstack.Fuota.CreateDeploymentResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateDeployment",
        __Marshaller_fuota_CreateDeploymentRequest,
        __Marshaller_fuota_CreateDeploymentResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.Fuota.GetDeploymentStatusRequest, global::Chirpstack.Fuota.GetDeploymentStatusResponse> __Method_GetDeploymentStatus = new grpc::Method<global::Chirpstack.Fuota.GetDeploymentStatusRequest, global::Chirpstack.Fuota.GetDeploymentStatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeploymentStatus",
        __Marshaller_fuota_GetDeploymentStatusRequest,
        __Marshaller_fuota_GetDeploymentStatusResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest, global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse> __Method_GetDeploymentDeviceLogs = new grpc::Method<global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest, global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetDeploymentDeviceLogs",
        __Marshaller_fuota_GetDeploymentDeviceLogsRequest,
        __Marshaller_fuota_GetDeploymentDeviceLogsResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Chirpstack.Fuota.FuotaReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of FUOTAServerService</summary>
    [grpc::BindServiceMethod(typeof(FUOTAServerService), "BindService")]
    public abstract partial class FUOTAServerServiceBase
    {
      /// <summary>
      /// CreateDeployment creates the given FUOTA deployment.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Chirpstack.Fuota.CreateDeploymentResponse> CreateDeployment(global::Chirpstack.Fuota.CreateDeploymentRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDeploymentStatus returns the FUOTA deployment status given an ID.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Chirpstack.Fuota.GetDeploymentStatusResponse> GetDeploymentStatus(global::Chirpstack.Fuota.GetDeploymentStatusRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      /// <summary>
      /// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::System.Threading.Tasks.Task<global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse> GetDeploymentDeviceLogs(global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for FUOTAServerService</summary>
    public partial class FUOTAServerServiceClient : grpc::ClientBase<FUOTAServerServiceClient>
    {
      /// <summary>Creates a new client for FUOTAServerService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FUOTAServerServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FUOTAServerService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FUOTAServerServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FUOTAServerServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FUOTAServerServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateDeployment creates the given FUOTA deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.CreateDeploymentResponse CreateDeployment(global::Chirpstack.Fuota.CreateDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeployment(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeployment creates the given FUOTA deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.CreateDeploymentResponse CreateDeployment(global::Chirpstack.Fuota.CreateDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateDeployment, null, options, request);
      }
      /// <summary>
      /// CreateDeployment creates the given FUOTA deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.CreateDeploymentResponse> CreateDeploymentAsync(global::Chirpstack.Fuota.CreateDeploymentRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateDeploymentAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateDeployment creates the given FUOTA deployment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.CreateDeploymentResponse> CreateDeploymentAsync(global::Chirpstack.Fuota.CreateDeploymentRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateDeployment, null, options, request);
      }
      /// <summary>
      /// GetDeploymentStatus returns the FUOTA deployment status given an ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.GetDeploymentStatusResponse GetDeploymentStatus(global::Chirpstack.Fuota.GetDeploymentStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeploymentStatus(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeploymentStatus returns the FUOTA deployment status given an ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.GetDeploymentStatusResponse GetDeploymentStatus(global::Chirpstack.Fuota.GetDeploymentStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeploymentStatus, null, options, request);
      }
      /// <summary>
      /// GetDeploymentStatus returns the FUOTA deployment status given an ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.GetDeploymentStatusResponse> GetDeploymentStatusAsync(global::Chirpstack.Fuota.GetDeploymentStatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeploymentStatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeploymentStatus returns the FUOTA deployment status given an ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.GetDeploymentStatusResponse> GetDeploymentStatusAsync(global::Chirpstack.Fuota.GetDeploymentStatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeploymentStatus, null, options, request);
      }
      /// <summary>
      /// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse GetDeploymentDeviceLogs(global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeploymentDeviceLogs(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse GetDeploymentDeviceLogs(global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetDeploymentDeviceLogs, null, options, request);
      }
      /// <summary>
      /// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse> GetDeploymentDeviceLogsAsync(global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetDeploymentDeviceLogsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetDeploymentDeviceLogs returns the FUOTA logs given a deployment ID and DevEUI.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse> GetDeploymentDeviceLogsAsync(global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetDeploymentDeviceLogs, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FUOTAServerServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FUOTAServerServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static grpc::ServerServiceDefinition BindService(FUOTAServerServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_CreateDeployment, serviceImpl.CreateDeployment)
          .AddMethod(__Method_GetDeploymentStatus, serviceImpl.GetDeploymentStatus)
          .AddMethod(__Method_GetDeploymentDeviceLogs, serviceImpl.GetDeploymentDeviceLogs).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    public static void BindService(grpc::ServiceBinderBase serviceBinder, FUOTAServerServiceBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_CreateDeployment, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.Fuota.CreateDeploymentRequest, global::Chirpstack.Fuota.CreateDeploymentResponse>(serviceImpl.CreateDeployment));
      serviceBinder.AddMethod(__Method_GetDeploymentStatus, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.Fuota.GetDeploymentStatusRequest, global::Chirpstack.Fuota.GetDeploymentStatusResponse>(serviceImpl.GetDeploymentStatus));
      serviceBinder.AddMethod(__Method_GetDeploymentDeviceLogs, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::Chirpstack.Fuota.GetDeploymentDeviceLogsRequest, global::Chirpstack.Fuota.GetDeploymentDeviceLogsResponse>(serviceImpl.GetDeploymentDeviceLogs));
    }

  }
}
#endregion
