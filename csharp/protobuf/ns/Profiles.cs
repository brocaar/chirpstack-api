// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ns/profiles.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Chirpstack.NetworkServer {

  /// <summary>Holder for reflection information generated from ns/profiles.proto</summary>
  public static partial class ProfilesReflection {

    #region Descriptor
    /// <summary>File descriptor for ns/profiles.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfilesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFucy9wcm9maWxlcy5wcm90bxICbnMigwQKDlNlcnZpY2VQcm9maWxlEgoK",
            "AmlkGAEgASgMEg8KB3VsX3JhdGUYAiABKA0SFgoOdWxfYnVja2V0X3NpemUY",
            "AyABKA0SJgoOdWxfcmF0ZV9wb2xpY3kYBCABKA4yDi5ucy5SYXRlUG9saWN5",
            "Eg8KB2RsX3JhdGUYBSABKA0SFgoOZGxfYnVja2V0X3NpemUYBiABKA0SJgoO",
            "ZGxfcmF0ZV9wb2xpY3kYByABKA4yDi5ucy5SYXRlUG9saWN5EhcKD2FkZF9n",
            "d19tZXRhZGF0YRgIIAEoCBIbChNkZXZfc3RhdHVzX3JlcV9mcmVxGAkgASgN",
            "EiEKGXJlcG9ydF9kZXZfc3RhdHVzX2JhdHRlcnkYCiABKAgSIAoYcmVwb3J0",
            "X2Rldl9zdGF0dXNfbWFyZ2luGAsgASgIEg4KBmRyX21pbhgMIAEoDRIOCgZk",
            "cl9tYXgYDSABKA0SFAoMY2hhbm5lbF9tYXNrGA4gASgMEhIKCnByX2FsbG93",
            "ZWQYDyABKAgSEgoKaHJfYWxsb3dlZBgQIAEoCBISCgpyYV9hbGxvd2VkGBEg",
            "ASgIEhMKC253a19nZW9fbG9jGBIgASgIEhIKCnRhcmdldF9wZXIYEyABKA0S",
            "GAoQbWluX2d3X2RpdmVyc2l0eRgUIAEoDRITCgtnd3NfcHJpdmF0ZRgVIAEo",
            "CCL7AwoNRGV2aWNlUHJvZmlsZRIKCgJpZBgBIAEoDBIYChBzdXBwb3J0c19j",
            "bGFzc19iGAIgASgIEhcKD2NsYXNzX2JfdGltZW91dBgDIAEoDRIYChBwaW5n",
            "X3Nsb3RfcGVyaW9kGAQgASgNEhQKDHBpbmdfc2xvdF9kchgFIAEoDRIWCg5w",
            "aW5nX3Nsb3RfZnJlcRgGIAEoDRIYChBzdXBwb3J0c19jbGFzc19jGAcgASgI",
            "EhcKD2NsYXNzX2NfdGltZW91dBgIIAEoDRITCgttYWNfdmVyc2lvbhgJIAEo",
            "CRIbChNyZWdfcGFyYW1zX3JldmlzaW9uGAogASgJEhIKCnJ4X2RlbGF5XzEY",
            "CyABKA0SFgoOcnhfZHJfb2Zmc2V0XzEYDCABKA0SFQoNcnhfZGF0YXJhdGVf",
            "MhgNIAEoDRIRCglyeF9mcmVxXzIYDiABKA0SHAoUZmFjdG9yeV9wcmVzZXRf",
            "ZnJlcXMYDyADKA0SEAoIbWF4X2VpcnAYECABKA0SFgoObWF4X2R1dHlfY3lj",
            "bGUYESABKA0SFQoNc3VwcG9ydHNfam9pbhgSIAEoCBIRCglyZl9yZWdpb24Y",
            "EyABKAkSHAoUc3VwcG9ydHNfMzJiaXRfZl9jbnQYFCABKAgSGAoQYWRyX2Fs",
            "Z29yaXRobV9pZBgVIAEoCSJfCg5Sb3V0aW5nUHJvZmlsZRIKCgJpZBgBIAEo",
            "DBINCgVhc19pZBgCIAEoCRIPCgdjYV9jZXJ0GAMgASgJEhAKCHRsc19jZXJ0",
            "GAQgASgJEg8KB3Rsc19rZXkYBSABKAkqIAoKUmF0ZVBvbGljeRIICgREUk9Q",
            "EAASCAoETUFSSxABQmgKFGlvLmNoaXJwc3RhY2suYXBpLm5zQg1Qcm9maWxl",
            "c1Byb3RvUAFaJGdpdGh1Yi5jb20vYnJvY2Fhci9jaGlycHN0YWNrLWFwaS9u",
            "c6oCGENoaXJwc3RhY2suTmV0d29ya1NlcnZlcmIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Chirpstack.NetworkServer.RatePolicy), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.NetworkServer.ServiceProfile), global::Chirpstack.NetworkServer.ServiceProfile.Parser, new[]{ "Id", "UlRate", "UlBucketSize", "UlRatePolicy", "DlRate", "DlBucketSize", "DlRatePolicy", "AddGwMetadata", "DevStatusReqFreq", "ReportDevStatusBattery", "ReportDevStatusMargin", "DrMin", "DrMax", "ChannelMask", "PrAllowed", "HrAllowed", "RaAllowed", "NwkGeoLoc", "TargetPer", "MinGwDiversity", "GwsPrivate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.NetworkServer.DeviceProfile), global::Chirpstack.NetworkServer.DeviceProfile.Parser, new[]{ "Id", "SupportsClassB", "ClassBTimeout", "PingSlotPeriod", "PingSlotDr", "PingSlotFreq", "SupportsClassC", "ClassCTimeout", "MacVersion", "RegParamsRevision", "RxDelay1", "RxDrOffset1", "RxDatarate2", "RxFreq2", "FactoryPresetFreqs", "MaxEirp", "MaxDutyCycle", "SupportsJoin", "RfRegion", "Supports32BitFCnt", "AdrAlgorithmId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Chirpstack.NetworkServer.RoutingProfile), global::Chirpstack.NetworkServer.RoutingProfile.Parser, new[]{ "Id", "AsId", "CaCert", "TlsCert", "TlsKey" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum RatePolicy {
    /// <summary>
    /// Drop
    /// </summary>
    [pbr::OriginalName("DROP")] Drop = 0,
    /// <summary>
    /// Mark
    /// </summary>
    [pbr::OriginalName("MARK")] Mark = 1,
  }

  #endregion

  #region Messages
  public sealed partial class ServiceProfile : pb::IMessage<ServiceProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ServiceProfile> _parser = new pb::MessageParser<ServiceProfile>(() => new ServiceProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ServiceProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.NetworkServer.ProfilesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceProfile(ServiceProfile other) : this() {
      id_ = other.id_;
      ulRate_ = other.ulRate_;
      ulBucketSize_ = other.ulBucketSize_;
      ulRatePolicy_ = other.ulRatePolicy_;
      dlRate_ = other.dlRate_;
      dlBucketSize_ = other.dlBucketSize_;
      dlRatePolicy_ = other.dlRatePolicy_;
      addGwMetadata_ = other.addGwMetadata_;
      devStatusReqFreq_ = other.devStatusReqFreq_;
      reportDevStatusBattery_ = other.reportDevStatusBattery_;
      reportDevStatusMargin_ = other.reportDevStatusMargin_;
      drMin_ = other.drMin_;
      drMax_ = other.drMax_;
      channelMask_ = other.channelMask_;
      prAllowed_ = other.prAllowed_;
      hrAllowed_ = other.hrAllowed_;
      raAllowed_ = other.raAllowed_;
      nwkGeoLoc_ = other.nwkGeoLoc_;
      targetPer_ = other.targetPer_;
      minGwDiversity_ = other.minGwDiversity_;
      gwsPrivate_ = other.gwsPrivate_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ServiceProfile Clone() {
      return new ServiceProfile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    /// Service-profile ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ul_rate" field.</summary>
    public const int UlRateFieldNumber = 2;
    private uint ulRate_;
    /// <summary>
    /// Token bucket filling rate, including ACKs (packet/h).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UlRate {
      get { return ulRate_; }
      set {
        ulRate_ = value;
      }
    }

    /// <summary>Field number for the "ul_bucket_size" field.</summary>
    public const int UlBucketSizeFieldNumber = 3;
    private uint ulBucketSize_;
    /// <summary>
    /// Token bucket burst size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint UlBucketSize {
      get { return ulBucketSize_; }
      set {
        ulBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "ul_rate_policy" field.</summary>
    public const int UlRatePolicyFieldNumber = 4;
    private global::Chirpstack.NetworkServer.RatePolicy ulRatePolicy_ = global::Chirpstack.NetworkServer.RatePolicy.Drop;
    /// <summary>
    /// Drop or mark when exceeding ULRate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.NetworkServer.RatePolicy UlRatePolicy {
      get { return ulRatePolicy_; }
      set {
        ulRatePolicy_ = value;
      }
    }

    /// <summary>Field number for the "dl_rate" field.</summary>
    public const int DlRateFieldNumber = 5;
    private uint dlRate_;
    /// <summary>
    /// Token bucket filling rate, including ACKs (packet/h).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DlRate {
      get { return dlRate_; }
      set {
        dlRate_ = value;
      }
    }

    /// <summary>Field number for the "dl_bucket_size" field.</summary>
    public const int DlBucketSizeFieldNumber = 6;
    private uint dlBucketSize_;
    /// <summary>
    /// Token bucket burst size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DlBucketSize {
      get { return dlBucketSize_; }
      set {
        dlBucketSize_ = value;
      }
    }

    /// <summary>Field number for the "dl_rate_policy" field.</summary>
    public const int DlRatePolicyFieldNumber = 7;
    private global::Chirpstack.NetworkServer.RatePolicy dlRatePolicy_ = global::Chirpstack.NetworkServer.RatePolicy.Drop;
    /// <summary>
    /// Drop or mark when exceeding DLRate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Chirpstack.NetworkServer.RatePolicy DlRatePolicy {
      get { return dlRatePolicy_; }
      set {
        dlRatePolicy_ = value;
      }
    }

    /// <summary>Field number for the "add_gw_metadata" field.</summary>
    public const int AddGwMetadataFieldNumber = 8;
    private bool addGwMetadata_;
    /// <summary>
    /// GW metadata (RSSI, SNR, GW geoloc., etc.) are added to the packet sent to AS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AddGwMetadata {
      get { return addGwMetadata_; }
      set {
        addGwMetadata_ = value;
      }
    }

    /// <summary>Field number for the "dev_status_req_freq" field.</summary>
    public const int DevStatusReqFreqFieldNumber = 9;
    private uint devStatusReqFreq_;
    /// <summary>
    /// Frequency to initiate an End-Device status request (request/day).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DevStatusReqFreq {
      get { return devStatusReqFreq_; }
      set {
        devStatusReqFreq_ = value;
      }
    }

    /// <summary>Field number for the "report_dev_status_battery" field.</summary>
    public const int ReportDevStatusBatteryFieldNumber = 10;
    private bool reportDevStatusBattery_;
    /// <summary>
    /// Report End-Device battery level to AS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReportDevStatusBattery {
      get { return reportDevStatusBattery_; }
      set {
        reportDevStatusBattery_ = value;
      }
    }

    /// <summary>Field number for the "report_dev_status_margin" field.</summary>
    public const int ReportDevStatusMarginFieldNumber = 11;
    private bool reportDevStatusMargin_;
    /// <summary>
    /// Report End-Device margin to AS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ReportDevStatusMargin {
      get { return reportDevStatusMargin_; }
      set {
        reportDevStatusMargin_ = value;
      }
    }

    /// <summary>Field number for the "dr_min" field.</summary>
    public const int DrMinFieldNumber = 12;
    private uint drMin_;
    /// <summary>
    /// Minimum allowed data rate. Used for ADR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DrMin {
      get { return drMin_; }
      set {
        drMin_ = value;
      }
    }

    /// <summary>Field number for the "dr_max" field.</summary>
    public const int DrMaxFieldNumber = 13;
    private uint drMax_;
    /// <summary>
    /// Maximum allowed data rate. Used for ADR.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint DrMax {
      get { return drMax_; }
      set {
        drMax_ = value;
      }
    }

    /// <summary>Field number for the "channel_mask" field.</summary>
    public const int ChannelMaskFieldNumber = 14;
    private pb::ByteString channelMask_ = pb::ByteString.Empty;
    /// <summary>
    /// Channel mask. sNS does not have to obey (i.e., informative).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString ChannelMask {
      get { return channelMask_; }
      set {
        channelMask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pr_allowed" field.</summary>
    public const int PrAllowedFieldNumber = 15;
    private bool prAllowed_;
    /// <summary>
    /// Passive Roaming allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool PrAllowed {
      get { return prAllowed_; }
      set {
        prAllowed_ = value;
      }
    }

    /// <summary>Field number for the "hr_allowed" field.</summary>
    public const int HrAllowedFieldNumber = 16;
    private bool hrAllowed_;
    /// <summary>
    /// Handover Roaming allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HrAllowed {
      get { return hrAllowed_; }
      set {
        hrAllowed_ = value;
      }
    }

    /// <summary>Field number for the "ra_allowed" field.</summary>
    public const int RaAllowedFieldNumber = 17;
    private bool raAllowed_;
    /// <summary>
    /// Roaming Activation allowed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool RaAllowed {
      get { return raAllowed_; }
      set {
        raAllowed_ = value;
      }
    }

    /// <summary>Field number for the "nwk_geo_loc" field.</summary>
    public const int NwkGeoLocFieldNumber = 18;
    private bool nwkGeoLoc_;
    /// <summary>
    /// Enable network geolocation service.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NwkGeoLoc {
      get { return nwkGeoLoc_; }
      set {
        nwkGeoLoc_ = value;
      }
    }

    /// <summary>Field number for the "target_per" field.</summary>
    public const int TargetPerFieldNumber = 19;
    private uint targetPer_;
    /// <summary>
    /// Target Packet Error Rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TargetPer {
      get { return targetPer_; }
      set {
        targetPer_ = value;
      }
    }

    /// <summary>Field number for the "min_gw_diversity" field.</summary>
    public const int MinGwDiversityFieldNumber = 20;
    private uint minGwDiversity_;
    /// <summary>
    /// Minimum number of receiving GWs (informative).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MinGwDiversity {
      get { return minGwDiversity_; }
      set {
        minGwDiversity_ = value;
      }
    }

    /// <summary>Field number for the "gws_private" field.</summary>
    public const int GwsPrivateFieldNumber = 21;
    private bool gwsPrivate_;
    /// <summary>
    /// Gateways under this service-profile are private.
    /// This means that these gateways can only be used by devices under the
    /// same service-profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool GwsPrivate {
      get { return gwsPrivate_; }
      set {
        gwsPrivate_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ServiceProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ServiceProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (UlRate != other.UlRate) return false;
      if (UlBucketSize != other.UlBucketSize) return false;
      if (UlRatePolicy != other.UlRatePolicy) return false;
      if (DlRate != other.DlRate) return false;
      if (DlBucketSize != other.DlBucketSize) return false;
      if (DlRatePolicy != other.DlRatePolicy) return false;
      if (AddGwMetadata != other.AddGwMetadata) return false;
      if (DevStatusReqFreq != other.DevStatusReqFreq) return false;
      if (ReportDevStatusBattery != other.ReportDevStatusBattery) return false;
      if (ReportDevStatusMargin != other.ReportDevStatusMargin) return false;
      if (DrMin != other.DrMin) return false;
      if (DrMax != other.DrMax) return false;
      if (ChannelMask != other.ChannelMask) return false;
      if (PrAllowed != other.PrAllowed) return false;
      if (HrAllowed != other.HrAllowed) return false;
      if (RaAllowed != other.RaAllowed) return false;
      if (NwkGeoLoc != other.NwkGeoLoc) return false;
      if (TargetPer != other.TargetPer) return false;
      if (MinGwDiversity != other.MinGwDiversity) return false;
      if (GwsPrivate != other.GwsPrivate) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (UlRate != 0) hash ^= UlRate.GetHashCode();
      if (UlBucketSize != 0) hash ^= UlBucketSize.GetHashCode();
      if (UlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) hash ^= UlRatePolicy.GetHashCode();
      if (DlRate != 0) hash ^= DlRate.GetHashCode();
      if (DlBucketSize != 0) hash ^= DlBucketSize.GetHashCode();
      if (DlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) hash ^= DlRatePolicy.GetHashCode();
      if (AddGwMetadata != false) hash ^= AddGwMetadata.GetHashCode();
      if (DevStatusReqFreq != 0) hash ^= DevStatusReqFreq.GetHashCode();
      if (ReportDevStatusBattery != false) hash ^= ReportDevStatusBattery.GetHashCode();
      if (ReportDevStatusMargin != false) hash ^= ReportDevStatusMargin.GetHashCode();
      if (DrMin != 0) hash ^= DrMin.GetHashCode();
      if (DrMax != 0) hash ^= DrMax.GetHashCode();
      if (ChannelMask.Length != 0) hash ^= ChannelMask.GetHashCode();
      if (PrAllowed != false) hash ^= PrAllowed.GetHashCode();
      if (HrAllowed != false) hash ^= HrAllowed.GetHashCode();
      if (RaAllowed != false) hash ^= RaAllowed.GetHashCode();
      if (NwkGeoLoc != false) hash ^= NwkGeoLoc.GetHashCode();
      if (TargetPer != 0) hash ^= TargetPer.GetHashCode();
      if (MinGwDiversity != 0) hash ^= MinGwDiversity.GetHashCode();
      if (GwsPrivate != false) hash ^= GwsPrivate.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (UlRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UlRate);
      }
      if (UlBucketSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UlBucketSize);
      }
      if (UlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        output.WriteRawTag(32);
        output.WriteEnum((int) UlRatePolicy);
      }
      if (DlRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DlRate);
      }
      if (DlBucketSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DlBucketSize);
      }
      if (DlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DlRatePolicy);
      }
      if (AddGwMetadata != false) {
        output.WriteRawTag(64);
        output.WriteBool(AddGwMetadata);
      }
      if (DevStatusReqFreq != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DevStatusReqFreq);
      }
      if (ReportDevStatusBattery != false) {
        output.WriteRawTag(80);
        output.WriteBool(ReportDevStatusBattery);
      }
      if (ReportDevStatusMargin != false) {
        output.WriteRawTag(88);
        output.WriteBool(ReportDevStatusMargin);
      }
      if (DrMin != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DrMin);
      }
      if (DrMax != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(DrMax);
      }
      if (ChannelMask.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(ChannelMask);
      }
      if (PrAllowed != false) {
        output.WriteRawTag(120);
        output.WriteBool(PrAllowed);
      }
      if (HrAllowed != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(HrAllowed);
      }
      if (RaAllowed != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(RaAllowed);
      }
      if (NwkGeoLoc != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(NwkGeoLoc);
      }
      if (TargetPer != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TargetPer);
      }
      if (MinGwDiversity != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(MinGwDiversity);
      }
      if (GwsPrivate != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(GwsPrivate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (UlRate != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(UlRate);
      }
      if (UlBucketSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(UlBucketSize);
      }
      if (UlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        output.WriteRawTag(32);
        output.WriteEnum((int) UlRatePolicy);
      }
      if (DlRate != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(DlRate);
      }
      if (DlBucketSize != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(DlBucketSize);
      }
      if (DlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        output.WriteRawTag(56);
        output.WriteEnum((int) DlRatePolicy);
      }
      if (AddGwMetadata != false) {
        output.WriteRawTag(64);
        output.WriteBool(AddGwMetadata);
      }
      if (DevStatusReqFreq != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DevStatusReqFreq);
      }
      if (ReportDevStatusBattery != false) {
        output.WriteRawTag(80);
        output.WriteBool(ReportDevStatusBattery);
      }
      if (ReportDevStatusMargin != false) {
        output.WriteRawTag(88);
        output.WriteBool(ReportDevStatusMargin);
      }
      if (DrMin != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(DrMin);
      }
      if (DrMax != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(DrMax);
      }
      if (ChannelMask.Length != 0) {
        output.WriteRawTag(114);
        output.WriteBytes(ChannelMask);
      }
      if (PrAllowed != false) {
        output.WriteRawTag(120);
        output.WriteBool(PrAllowed);
      }
      if (HrAllowed != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(HrAllowed);
      }
      if (RaAllowed != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(RaAllowed);
      }
      if (NwkGeoLoc != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(NwkGeoLoc);
      }
      if (TargetPer != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(TargetPer);
      }
      if (MinGwDiversity != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(MinGwDiversity);
      }
      if (GwsPrivate != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(GwsPrivate);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (UlRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UlRate);
      }
      if (UlBucketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UlBucketSize);
      }
      if (UlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UlRatePolicy);
      }
      if (DlRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DlRate);
      }
      if (DlBucketSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DlBucketSize);
      }
      if (DlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DlRatePolicy);
      }
      if (AddGwMetadata != false) {
        size += 1 + 1;
      }
      if (DevStatusReqFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DevStatusReqFreq);
      }
      if (ReportDevStatusBattery != false) {
        size += 1 + 1;
      }
      if (ReportDevStatusMargin != false) {
        size += 1 + 1;
      }
      if (DrMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrMin);
      }
      if (DrMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DrMax);
      }
      if (ChannelMask.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ChannelMask);
      }
      if (PrAllowed != false) {
        size += 1 + 1;
      }
      if (HrAllowed != false) {
        size += 2 + 1;
      }
      if (RaAllowed != false) {
        size += 2 + 1;
      }
      if (NwkGeoLoc != false) {
        size += 2 + 1;
      }
      if (TargetPer != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TargetPer);
      }
      if (MinGwDiversity != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MinGwDiversity);
      }
      if (GwsPrivate != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ServiceProfile other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.UlRate != 0) {
        UlRate = other.UlRate;
      }
      if (other.UlBucketSize != 0) {
        UlBucketSize = other.UlBucketSize;
      }
      if (other.UlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        UlRatePolicy = other.UlRatePolicy;
      }
      if (other.DlRate != 0) {
        DlRate = other.DlRate;
      }
      if (other.DlBucketSize != 0) {
        DlBucketSize = other.DlBucketSize;
      }
      if (other.DlRatePolicy != global::Chirpstack.NetworkServer.RatePolicy.Drop) {
        DlRatePolicy = other.DlRatePolicy;
      }
      if (other.AddGwMetadata != false) {
        AddGwMetadata = other.AddGwMetadata;
      }
      if (other.DevStatusReqFreq != 0) {
        DevStatusReqFreq = other.DevStatusReqFreq;
      }
      if (other.ReportDevStatusBattery != false) {
        ReportDevStatusBattery = other.ReportDevStatusBattery;
      }
      if (other.ReportDevStatusMargin != false) {
        ReportDevStatusMargin = other.ReportDevStatusMargin;
      }
      if (other.DrMin != 0) {
        DrMin = other.DrMin;
      }
      if (other.DrMax != 0) {
        DrMax = other.DrMax;
      }
      if (other.ChannelMask.Length != 0) {
        ChannelMask = other.ChannelMask;
      }
      if (other.PrAllowed != false) {
        PrAllowed = other.PrAllowed;
      }
      if (other.HrAllowed != false) {
        HrAllowed = other.HrAllowed;
      }
      if (other.RaAllowed != false) {
        RaAllowed = other.RaAllowed;
      }
      if (other.NwkGeoLoc != false) {
        NwkGeoLoc = other.NwkGeoLoc;
      }
      if (other.TargetPer != 0) {
        TargetPer = other.TargetPer;
      }
      if (other.MinGwDiversity != 0) {
        MinGwDiversity = other.MinGwDiversity;
      }
      if (other.GwsPrivate != false) {
        GwsPrivate = other.GwsPrivate;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            UlRate = input.ReadUInt32();
            break;
          }
          case 24: {
            UlBucketSize = input.ReadUInt32();
            break;
          }
          case 32: {
            UlRatePolicy = (global::Chirpstack.NetworkServer.RatePolicy) input.ReadEnum();
            break;
          }
          case 40: {
            DlRate = input.ReadUInt32();
            break;
          }
          case 48: {
            DlBucketSize = input.ReadUInt32();
            break;
          }
          case 56: {
            DlRatePolicy = (global::Chirpstack.NetworkServer.RatePolicy) input.ReadEnum();
            break;
          }
          case 64: {
            AddGwMetadata = input.ReadBool();
            break;
          }
          case 72: {
            DevStatusReqFreq = input.ReadUInt32();
            break;
          }
          case 80: {
            ReportDevStatusBattery = input.ReadBool();
            break;
          }
          case 88: {
            ReportDevStatusMargin = input.ReadBool();
            break;
          }
          case 96: {
            DrMin = input.ReadUInt32();
            break;
          }
          case 104: {
            DrMax = input.ReadUInt32();
            break;
          }
          case 114: {
            ChannelMask = input.ReadBytes();
            break;
          }
          case 120: {
            PrAllowed = input.ReadBool();
            break;
          }
          case 128: {
            HrAllowed = input.ReadBool();
            break;
          }
          case 136: {
            RaAllowed = input.ReadBool();
            break;
          }
          case 144: {
            NwkGeoLoc = input.ReadBool();
            break;
          }
          case 152: {
            TargetPer = input.ReadUInt32();
            break;
          }
          case 160: {
            MinGwDiversity = input.ReadUInt32();
            break;
          }
          case 168: {
            GwsPrivate = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            UlRate = input.ReadUInt32();
            break;
          }
          case 24: {
            UlBucketSize = input.ReadUInt32();
            break;
          }
          case 32: {
            UlRatePolicy = (global::Chirpstack.NetworkServer.RatePolicy) input.ReadEnum();
            break;
          }
          case 40: {
            DlRate = input.ReadUInt32();
            break;
          }
          case 48: {
            DlBucketSize = input.ReadUInt32();
            break;
          }
          case 56: {
            DlRatePolicy = (global::Chirpstack.NetworkServer.RatePolicy) input.ReadEnum();
            break;
          }
          case 64: {
            AddGwMetadata = input.ReadBool();
            break;
          }
          case 72: {
            DevStatusReqFreq = input.ReadUInt32();
            break;
          }
          case 80: {
            ReportDevStatusBattery = input.ReadBool();
            break;
          }
          case 88: {
            ReportDevStatusMargin = input.ReadBool();
            break;
          }
          case 96: {
            DrMin = input.ReadUInt32();
            break;
          }
          case 104: {
            DrMax = input.ReadUInt32();
            break;
          }
          case 114: {
            ChannelMask = input.ReadBytes();
            break;
          }
          case 120: {
            PrAllowed = input.ReadBool();
            break;
          }
          case 128: {
            HrAllowed = input.ReadBool();
            break;
          }
          case 136: {
            RaAllowed = input.ReadBool();
            break;
          }
          case 144: {
            NwkGeoLoc = input.ReadBool();
            break;
          }
          case 152: {
            TargetPer = input.ReadUInt32();
            break;
          }
          case 160: {
            MinGwDiversity = input.ReadUInt32();
            break;
          }
          case 168: {
            GwsPrivate = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class DeviceProfile : pb::IMessage<DeviceProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DeviceProfile> _parser = new pb::MessageParser<DeviceProfile>(() => new DeviceProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeviceProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.NetworkServer.ProfilesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile(DeviceProfile other) : this() {
      id_ = other.id_;
      supportsClassB_ = other.supportsClassB_;
      classBTimeout_ = other.classBTimeout_;
      pingSlotPeriod_ = other.pingSlotPeriod_;
      pingSlotDr_ = other.pingSlotDr_;
      pingSlotFreq_ = other.pingSlotFreq_;
      supportsClassC_ = other.supportsClassC_;
      classCTimeout_ = other.classCTimeout_;
      macVersion_ = other.macVersion_;
      regParamsRevision_ = other.regParamsRevision_;
      rxDelay1_ = other.rxDelay1_;
      rxDrOffset1_ = other.rxDrOffset1_;
      rxDatarate2_ = other.rxDatarate2_;
      rxFreq2_ = other.rxFreq2_;
      factoryPresetFreqs_ = other.factoryPresetFreqs_.Clone();
      maxEirp_ = other.maxEirp_;
      maxDutyCycle_ = other.maxDutyCycle_;
      supportsJoin_ = other.supportsJoin_;
      rfRegion_ = other.rfRegion_;
      supports32BitFCnt_ = other.supports32BitFCnt_;
      adrAlgorithmId_ = other.adrAlgorithmId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeviceProfile Clone() {
      return new DeviceProfile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    /// Device-profile ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supports_class_b" field.</summary>
    public const int SupportsClassBFieldNumber = 2;
    private bool supportsClassB_;
    /// <summary>
    /// End-Device supports Class B.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassB {
      get { return supportsClassB_; }
      set {
        supportsClassB_ = value;
      }
    }

    /// <summary>Field number for the "class_b_timeout" field.</summary>
    public const int ClassBTimeoutFieldNumber = 3;
    private uint classBTimeout_;
    /// <summary>
    /// Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class B mode supported).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassBTimeout {
      get { return classBTimeout_; }
      set {
        classBTimeout_ = value;
      }
    }

    /// <summary>Field number for the "ping_slot_period" field.</summary>
    public const int PingSlotPeriodFieldNumber = 4;
    private uint pingSlotPeriod_;
    /// <summary>
    /// Mandatory if class B mode supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PingSlotPeriod {
      get { return pingSlotPeriod_; }
      set {
        pingSlotPeriod_ = value;
      }
    }

    /// <summary>Field number for the "ping_slot_dr" field.</summary>
    public const int PingSlotDrFieldNumber = 5;
    private uint pingSlotDr_;
    /// <summary>
    /// Mandatory if class B mode supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PingSlotDr {
      get { return pingSlotDr_; }
      set {
        pingSlotDr_ = value;
      }
    }

    /// <summary>Field number for the "ping_slot_freq" field.</summary>
    public const int PingSlotFreqFieldNumber = 6;
    private uint pingSlotFreq_;
    /// <summary>
    /// Mandatory if class B mode supported.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint PingSlotFreq {
      get { return pingSlotFreq_; }
      set {
        pingSlotFreq_ = value;
      }
    }

    /// <summary>Field number for the "supports_class_c" field.</summary>
    public const int SupportsClassCFieldNumber = 7;
    private bool supportsClassC_;
    /// <summary>
    /// End-Device supports Class C.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsClassC {
      get { return supportsClassC_; }
      set {
        supportsClassC_ = value;
      }
    }

    /// <summary>Field number for the "class_c_timeout" field.</summary>
    public const int ClassCTimeoutFieldNumber = 8;
    private uint classCTimeout_;
    /// <summary>
    /// Maximum delay for the End-Device to answer a MAC request or a confirmed DL frame (mandatory if class C mode supported).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint ClassCTimeout {
      get { return classCTimeout_; }
      set {
        classCTimeout_ = value;
      }
    }

    /// <summary>Field number for the "mac_version" field.</summary>
    public const int MacVersionFieldNumber = 9;
    private string macVersion_ = "";
    /// <summary>
    /// Version of the LoRaWAN supported by the End-Device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string MacVersion {
      get { return macVersion_; }
      set {
        macVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "reg_params_revision" field.</summary>
    public const int RegParamsRevisionFieldNumber = 10;
    private string regParamsRevision_ = "";
    /// <summary>
    /// Revision of the Regional Parameters document supported by the End-Device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RegParamsRevision {
      get { return regParamsRevision_; }
      set {
        regParamsRevision_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rx_delay_1" field.</summary>
    public const int RxDelay1FieldNumber = 11;
    private uint rxDelay1_;
    /// <summary>
    /// Class A RX1 delay (mandatory for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RxDelay1 {
      get { return rxDelay1_; }
      set {
        rxDelay1_ = value;
      }
    }

    /// <summary>Field number for the "rx_dr_offset_1" field.</summary>
    public const int RxDrOffset1FieldNumber = 12;
    private uint rxDrOffset1_;
    /// <summary>
    /// RX1 data rate offset (mandatory for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RxDrOffset1 {
      get { return rxDrOffset1_; }
      set {
        rxDrOffset1_ = value;
      }
    }

    /// <summary>Field number for the "rx_datarate_2" field.</summary>
    public const int RxDatarate2FieldNumber = 13;
    private uint rxDatarate2_;
    /// <summary>
    /// RX2 data rate (mandatory for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RxDatarate2 {
      get { return rxDatarate2_; }
      set {
        rxDatarate2_ = value;
      }
    }

    /// <summary>Field number for the "rx_freq_2" field.</summary>
    public const int RxFreq2FieldNumber = 14;
    private uint rxFreq2_;
    /// <summary>
    /// RX2 channel frequency (mandatory for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint RxFreq2 {
      get { return rxFreq2_; }
      set {
        rxFreq2_ = value;
      }
    }

    /// <summary>Field number for the "factory_preset_freqs" field.</summary>
    public const int FactoryPresetFreqsFieldNumber = 15;
    private static readonly pb::FieldCodec<uint> _repeated_factoryPresetFreqs_codec
        = pb::FieldCodec.ForUInt32(122);
    private readonly pbc::RepeatedField<uint> factoryPresetFreqs_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// List of factory-preset frequencies (mandatory for ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<uint> FactoryPresetFreqs {
      get { return factoryPresetFreqs_; }
    }

    /// <summary>Field number for the "max_eirp" field.</summary>
    public const int MaxEirpFieldNumber = 16;
    private uint maxEirp_;
    /// <summary>
    /// Maximum EIRP supported by the End-Device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxEirp {
      get { return maxEirp_; }
      set {
        maxEirp_ = value;
      }
    }

    /// <summary>Field number for the "max_duty_cycle" field.</summary>
    public const int MaxDutyCycleFieldNumber = 17;
    private uint maxDutyCycle_;
    /// <summary>
    /// Maximum duty cycle supported by the End-Device.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint MaxDutyCycle {
      get { return maxDutyCycle_; }
      set {
        maxDutyCycle_ = value;
      }
    }

    /// <summary>Field number for the "supports_join" field.</summary>
    public const int SupportsJoinFieldNumber = 18;
    private bool supportsJoin_;
    /// <summary>
    /// End-Device supports Join (OTAA) or not (ABP).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsJoin {
      get { return supportsJoin_; }
      set {
        supportsJoin_ = value;
      }
    }

    /// <summary>Field number for the "rf_region" field.</summary>
    public const int RfRegionFieldNumber = 19;
    private string rfRegion_ = "";
    /// <summary>
    /// RF region name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string RfRegion {
      get { return rfRegion_; }
      set {
        rfRegion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "supports_32bit_f_cnt" field.</summary>
    public const int Supports32BitFCntFieldNumber = 20;
    private bool supports32BitFCnt_;
    /// <summary>
    /// End-Device uses 32bit FCnt (mandatory for LoRaWAN 1.0 End-Device).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Supports32BitFCnt {
      get { return supports32BitFCnt_; }
      set {
        supports32BitFCnt_ = value;
      }
    }

    /// <summary>Field number for the "adr_algorithm_id" field.</summary>
    public const int AdrAlgorithmIdFieldNumber = 21;
    private string adrAlgorithmId_ = "";
    /// <summary>
    /// ADR algorithm ID.
    /// In case this is left blank, or is configured to a non-existing ADR
    /// algorithm (plugin), then it falls back to 'default'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AdrAlgorithmId {
      get { return adrAlgorithmId_; }
      set {
        adrAlgorithmId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeviceProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeviceProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (SupportsClassB != other.SupportsClassB) return false;
      if (ClassBTimeout != other.ClassBTimeout) return false;
      if (PingSlotPeriod != other.PingSlotPeriod) return false;
      if (PingSlotDr != other.PingSlotDr) return false;
      if (PingSlotFreq != other.PingSlotFreq) return false;
      if (SupportsClassC != other.SupportsClassC) return false;
      if (ClassCTimeout != other.ClassCTimeout) return false;
      if (MacVersion != other.MacVersion) return false;
      if (RegParamsRevision != other.RegParamsRevision) return false;
      if (RxDelay1 != other.RxDelay1) return false;
      if (RxDrOffset1 != other.RxDrOffset1) return false;
      if (RxDatarate2 != other.RxDatarate2) return false;
      if (RxFreq2 != other.RxFreq2) return false;
      if(!factoryPresetFreqs_.Equals(other.factoryPresetFreqs_)) return false;
      if (MaxEirp != other.MaxEirp) return false;
      if (MaxDutyCycle != other.MaxDutyCycle) return false;
      if (SupportsJoin != other.SupportsJoin) return false;
      if (RfRegion != other.RfRegion) return false;
      if (Supports32BitFCnt != other.Supports32BitFCnt) return false;
      if (AdrAlgorithmId != other.AdrAlgorithmId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (SupportsClassB != false) hash ^= SupportsClassB.GetHashCode();
      if (ClassBTimeout != 0) hash ^= ClassBTimeout.GetHashCode();
      if (PingSlotPeriod != 0) hash ^= PingSlotPeriod.GetHashCode();
      if (PingSlotDr != 0) hash ^= PingSlotDr.GetHashCode();
      if (PingSlotFreq != 0) hash ^= PingSlotFreq.GetHashCode();
      if (SupportsClassC != false) hash ^= SupportsClassC.GetHashCode();
      if (ClassCTimeout != 0) hash ^= ClassCTimeout.GetHashCode();
      if (MacVersion.Length != 0) hash ^= MacVersion.GetHashCode();
      if (RegParamsRevision.Length != 0) hash ^= RegParamsRevision.GetHashCode();
      if (RxDelay1 != 0) hash ^= RxDelay1.GetHashCode();
      if (RxDrOffset1 != 0) hash ^= RxDrOffset1.GetHashCode();
      if (RxDatarate2 != 0) hash ^= RxDatarate2.GetHashCode();
      if (RxFreq2 != 0) hash ^= RxFreq2.GetHashCode();
      hash ^= factoryPresetFreqs_.GetHashCode();
      if (MaxEirp != 0) hash ^= MaxEirp.GetHashCode();
      if (MaxDutyCycle != 0) hash ^= MaxDutyCycle.GetHashCode();
      if (SupportsJoin != false) hash ^= SupportsJoin.GetHashCode();
      if (RfRegion.Length != 0) hash ^= RfRegion.GetHashCode();
      if (Supports32BitFCnt != false) hash ^= Supports32BitFCnt.GetHashCode();
      if (AdrAlgorithmId.Length != 0) hash ^= AdrAlgorithmId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(16);
        output.WriteBool(SupportsClassB);
      }
      if (ClassBTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClassBTimeout);
      }
      if (PingSlotPeriod != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PingSlotPeriod);
      }
      if (PingSlotDr != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PingSlotDr);
      }
      if (PingSlotFreq != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PingSlotFreq);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(56);
        output.WriteBool(SupportsClassC);
      }
      if (ClassCTimeout != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ClassCTimeout);
      }
      if (MacVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MacVersion);
      }
      if (RegParamsRevision.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RegParamsRevision);
      }
      if (RxDelay1 != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RxDelay1);
      }
      if (RxDrOffset1 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RxDrOffset1);
      }
      if (RxDatarate2 != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RxDatarate2);
      }
      if (RxFreq2 != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RxFreq2);
      }
      factoryPresetFreqs_.WriteTo(output, _repeated_factoryPresetFreqs_codec);
      if (MaxEirp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MaxEirp);
      }
      if (MaxDutyCycle != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxDutyCycle);
      }
      if (SupportsJoin != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SupportsJoin);
      }
      if (RfRegion.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(RfRegion);
      }
      if (Supports32BitFCnt != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Supports32BitFCnt);
      }
      if (AdrAlgorithmId.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(AdrAlgorithmId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (SupportsClassB != false) {
        output.WriteRawTag(16);
        output.WriteBool(SupportsClassB);
      }
      if (ClassBTimeout != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ClassBTimeout);
      }
      if (PingSlotPeriod != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(PingSlotPeriod);
      }
      if (PingSlotDr != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(PingSlotDr);
      }
      if (PingSlotFreq != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(PingSlotFreq);
      }
      if (SupportsClassC != false) {
        output.WriteRawTag(56);
        output.WriteBool(SupportsClassC);
      }
      if (ClassCTimeout != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(ClassCTimeout);
      }
      if (MacVersion.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(MacVersion);
      }
      if (RegParamsRevision.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(RegParamsRevision);
      }
      if (RxDelay1 != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(RxDelay1);
      }
      if (RxDrOffset1 != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(RxDrOffset1);
      }
      if (RxDatarate2 != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(RxDatarate2);
      }
      if (RxFreq2 != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(RxFreq2);
      }
      factoryPresetFreqs_.WriteTo(ref output, _repeated_factoryPresetFreqs_codec);
      if (MaxEirp != 0) {
        output.WriteRawTag(128, 1);
        output.WriteUInt32(MaxEirp);
      }
      if (MaxDutyCycle != 0) {
        output.WriteRawTag(136, 1);
        output.WriteUInt32(MaxDutyCycle);
      }
      if (SupportsJoin != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(SupportsJoin);
      }
      if (RfRegion.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(RfRegion);
      }
      if (Supports32BitFCnt != false) {
        output.WriteRawTag(160, 1);
        output.WriteBool(Supports32BitFCnt);
      }
      if (AdrAlgorithmId.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(AdrAlgorithmId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (SupportsClassB != false) {
        size += 1 + 1;
      }
      if (ClassBTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClassBTimeout);
      }
      if (PingSlotPeriod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingSlotPeriod);
      }
      if (PingSlotDr != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingSlotDr);
      }
      if (PingSlotFreq != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PingSlotFreq);
      }
      if (SupportsClassC != false) {
        size += 1 + 1;
      }
      if (ClassCTimeout != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ClassCTimeout);
      }
      if (MacVersion.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacVersion);
      }
      if (RegParamsRevision.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RegParamsRevision);
      }
      if (RxDelay1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RxDelay1);
      }
      if (RxDrOffset1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RxDrOffset1);
      }
      if (RxDatarate2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RxDatarate2);
      }
      if (RxFreq2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RxFreq2);
      }
      size += factoryPresetFreqs_.CalculateSize(_repeated_factoryPresetFreqs_codec);
      if (MaxEirp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxEirp);
      }
      if (MaxDutyCycle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(MaxDutyCycle);
      }
      if (SupportsJoin != false) {
        size += 2 + 1;
      }
      if (RfRegion.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RfRegion);
      }
      if (Supports32BitFCnt != false) {
        size += 2 + 1;
      }
      if (AdrAlgorithmId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AdrAlgorithmId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeviceProfile other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.SupportsClassB != false) {
        SupportsClassB = other.SupportsClassB;
      }
      if (other.ClassBTimeout != 0) {
        ClassBTimeout = other.ClassBTimeout;
      }
      if (other.PingSlotPeriod != 0) {
        PingSlotPeriod = other.PingSlotPeriod;
      }
      if (other.PingSlotDr != 0) {
        PingSlotDr = other.PingSlotDr;
      }
      if (other.PingSlotFreq != 0) {
        PingSlotFreq = other.PingSlotFreq;
      }
      if (other.SupportsClassC != false) {
        SupportsClassC = other.SupportsClassC;
      }
      if (other.ClassCTimeout != 0) {
        ClassCTimeout = other.ClassCTimeout;
      }
      if (other.MacVersion.Length != 0) {
        MacVersion = other.MacVersion;
      }
      if (other.RegParamsRevision.Length != 0) {
        RegParamsRevision = other.RegParamsRevision;
      }
      if (other.RxDelay1 != 0) {
        RxDelay1 = other.RxDelay1;
      }
      if (other.RxDrOffset1 != 0) {
        RxDrOffset1 = other.RxDrOffset1;
      }
      if (other.RxDatarate2 != 0) {
        RxDatarate2 = other.RxDatarate2;
      }
      if (other.RxFreq2 != 0) {
        RxFreq2 = other.RxFreq2;
      }
      factoryPresetFreqs_.Add(other.factoryPresetFreqs_);
      if (other.MaxEirp != 0) {
        MaxEirp = other.MaxEirp;
      }
      if (other.MaxDutyCycle != 0) {
        MaxDutyCycle = other.MaxDutyCycle;
      }
      if (other.SupportsJoin != false) {
        SupportsJoin = other.SupportsJoin;
      }
      if (other.RfRegion.Length != 0) {
        RfRegion = other.RfRegion;
      }
      if (other.Supports32BitFCnt != false) {
        Supports32BitFCnt = other.Supports32BitFCnt;
      }
      if (other.AdrAlgorithmId.Length != 0) {
        AdrAlgorithmId = other.AdrAlgorithmId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 24: {
            ClassBTimeout = input.ReadUInt32();
            break;
          }
          case 32: {
            PingSlotPeriod = input.ReadUInt32();
            break;
          }
          case 40: {
            PingSlotDr = input.ReadUInt32();
            break;
          }
          case 48: {
            PingSlotFreq = input.ReadUInt32();
            break;
          }
          case 56: {
            SupportsClassC = input.ReadBool();
            break;
          }
          case 64: {
            ClassCTimeout = input.ReadUInt32();
            break;
          }
          case 74: {
            MacVersion = input.ReadString();
            break;
          }
          case 82: {
            RegParamsRevision = input.ReadString();
            break;
          }
          case 88: {
            RxDelay1 = input.ReadUInt32();
            break;
          }
          case 96: {
            RxDrOffset1 = input.ReadUInt32();
            break;
          }
          case 104: {
            RxDatarate2 = input.ReadUInt32();
            break;
          }
          case 112: {
            RxFreq2 = input.ReadUInt32();
            break;
          }
          case 122:
          case 120: {
            factoryPresetFreqs_.AddEntriesFrom(input, _repeated_factoryPresetFreqs_codec);
            break;
          }
          case 128: {
            MaxEirp = input.ReadUInt32();
            break;
          }
          case 136: {
            MaxDutyCycle = input.ReadUInt32();
            break;
          }
          case 144: {
            SupportsJoin = input.ReadBool();
            break;
          }
          case 154: {
            RfRegion = input.ReadString();
            break;
          }
          case 160: {
            Supports32BitFCnt = input.ReadBool();
            break;
          }
          case 170: {
            AdrAlgorithmId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 16: {
            SupportsClassB = input.ReadBool();
            break;
          }
          case 24: {
            ClassBTimeout = input.ReadUInt32();
            break;
          }
          case 32: {
            PingSlotPeriod = input.ReadUInt32();
            break;
          }
          case 40: {
            PingSlotDr = input.ReadUInt32();
            break;
          }
          case 48: {
            PingSlotFreq = input.ReadUInt32();
            break;
          }
          case 56: {
            SupportsClassC = input.ReadBool();
            break;
          }
          case 64: {
            ClassCTimeout = input.ReadUInt32();
            break;
          }
          case 74: {
            MacVersion = input.ReadString();
            break;
          }
          case 82: {
            RegParamsRevision = input.ReadString();
            break;
          }
          case 88: {
            RxDelay1 = input.ReadUInt32();
            break;
          }
          case 96: {
            RxDrOffset1 = input.ReadUInt32();
            break;
          }
          case 104: {
            RxDatarate2 = input.ReadUInt32();
            break;
          }
          case 112: {
            RxFreq2 = input.ReadUInt32();
            break;
          }
          case 122:
          case 120: {
            factoryPresetFreqs_.AddEntriesFrom(ref input, _repeated_factoryPresetFreqs_codec);
            break;
          }
          case 128: {
            MaxEirp = input.ReadUInt32();
            break;
          }
          case 136: {
            MaxDutyCycle = input.ReadUInt32();
            break;
          }
          case 144: {
            SupportsJoin = input.ReadBool();
            break;
          }
          case 154: {
            RfRegion = input.ReadString();
            break;
          }
          case 160: {
            Supports32BitFCnt = input.ReadBool();
            break;
          }
          case 170: {
            AdrAlgorithmId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class RoutingProfile : pb::IMessage<RoutingProfile>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RoutingProfile> _parser = new pb::MessageParser<RoutingProfile>(() => new RoutingProfile());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RoutingProfile> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Chirpstack.NetworkServer.ProfilesReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingProfile() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingProfile(RoutingProfile other) : this() {
      id_ = other.id_;
      asId_ = other.asId_;
      caCert_ = other.caCert_;
      tlsCert_ = other.tlsCert_;
      tlsKey_ = other.tlsKey_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RoutingProfile Clone() {
      return new RoutingProfile(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private pb::ByteString id_ = pb::ByteString.Empty;
    /// <summary>
    /// ID of the routing profile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "as_id" field.</summary>
    public const int AsIdFieldNumber = 2;
    private string asId_ = "";
    /// <summary>
    /// Application-server ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AsId {
      get { return asId_; }
      set {
        asId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ca_cert" field.</summary>
    public const int CaCertFieldNumber = 3;
    private string caCert_ = "";
    /// <summary>
    /// CA certificate for connecting to the AS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CaCert {
      get { return caCert_; }
      set {
        caCert_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tls_cert" field.</summary>
    public const int TlsCertFieldNumber = 4;
    private string tlsCert_ = "";
    /// <summary>
    /// TLS certificate for connecting to the AS.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TlsCert {
      get { return tlsCert_; }
      set {
        tlsCert_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tls_key" field.</summary>
    public const int TlsKeyFieldNumber = 5;
    private string tlsKey_ = "";
    /// <summary>
    /// TLS key for connecting to the AS.
    /// Note: when retrieving the routing-profile, the tls_key is not returned
    /// for security reasons. When updating the routing-profile, an empty tls_key
    /// does not clear the certificate, unless the tls_cert is also left blank.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TlsKey {
      get { return tlsKey_; }
      set {
        tlsKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RoutingProfile);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RoutingProfile other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AsId != other.AsId) return false;
      if (CaCert != other.CaCert) return false;
      if (TlsCert != other.TlsCert) return false;
      if (TlsKey != other.TlsKey) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (AsId.Length != 0) hash ^= AsId.GetHashCode();
      if (CaCert.Length != 0) hash ^= CaCert.GetHashCode();
      if (TlsCert.Length != 0) hash ^= TlsCert.GetHashCode();
      if (TlsKey.Length != 0) hash ^= TlsKey.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (AsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AsId);
      }
      if (CaCert.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CaCert);
      }
      if (TlsCert.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TlsCert);
      }
      if (TlsKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TlsKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Id);
      }
      if (AsId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AsId);
      }
      if (CaCert.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CaCert);
      }
      if (TlsCert.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TlsCert);
      }
      if (TlsKey.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(TlsKey);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
      }
      if (AsId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AsId);
      }
      if (CaCert.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CaCert);
      }
      if (TlsCert.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlsCert);
      }
      if (TlsKey.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TlsKey);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RoutingProfile other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.AsId.Length != 0) {
        AsId = other.AsId;
      }
      if (other.CaCert.Length != 0) {
        CaCert = other.CaCert;
      }
      if (other.TlsCert.Length != 0) {
        TlsCert = other.TlsCert;
      }
      if (other.TlsKey.Length != 0) {
        TlsKey = other.TlsKey;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            AsId = input.ReadString();
            break;
          }
          case 26: {
            CaCert = input.ReadString();
            break;
          }
          case 34: {
            TlsCert = input.ReadString();
            break;
          }
          case 42: {
            TlsKey = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadBytes();
            break;
          }
          case 18: {
            AsId = input.ReadString();
            break;
          }
          case 26: {
            CaCert = input.ReadString();
            break;
          }
          case 34: {
            TlsCert = input.ReadString();
            break;
          }
          case 42: {
            TlsKey = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
